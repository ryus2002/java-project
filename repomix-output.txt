This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-04-25T09:52:54.715Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
1.txt
docker-compose.yml
Dockerfile
pom.xml
README.md
src/main/java/com/example/ecommerce/config/DataInitializer.java
src/main/java/com/example/ecommerce/config/JasyptConfig.java
src/main/java/com/example/ecommerce/config/SwaggerConfig.java
src/main/java/com/example/ecommerce/controller/AuthCheckController.java
src/main/java/com/example/ecommerce/controller/AuthController.java
src/main/java/com/example/ecommerce/controller/CartController.java
src/main/java/com/example/ecommerce/controller/CategoryController.java
src/main/java/com/example/ecommerce/controller/ErrorController.java
src/main/java/com/example/ecommerce/controller/OrderController.java
src/main/java/com/example/ecommerce/controller/PaymentController.java
src/main/java/com/example/ecommerce/controller/ProductController.java
src/main/java/com/example/ecommerce/controller/UserController.java
src/main/java/com/example/ecommerce/controller/ViewController.java
src/main/java/com/example/ecommerce/dto/CartItemRequest.java
src/main/java/com/example/ecommerce/dto/CartItemResponse.java
src/main/java/com/example/ecommerce/dto/CartResponse.java
src/main/java/com/example/ecommerce/dto/JwtResponse.java
src/main/java/com/example/ecommerce/dto/LoginRequest.java
src/main/java/com/example/ecommerce/dto/MessageResponse.java
src/main/java/com/example/ecommerce/dto/OrderItemResponse.java
src/main/java/com/example/ecommerce/dto/OrderRequest.java
src/main/java/com/example/ecommerce/dto/OrderResponse.java
src/main/java/com/example/ecommerce/dto/PaymentRequest.java
src/main/java/com/example/ecommerce/dto/PaymentResponse.java
src/main/java/com/example/ecommerce/dto/ProductRequest.java
src/main/java/com/example/ecommerce/dto/ProductResponse.java
src/main/java/com/example/ecommerce/dto/SignupRequest.java
src/main/java/com/example/ecommerce/EcommerceApplication.java
src/main/java/com/example/ecommerce/model/Cart.java
src/main/java/com/example/ecommerce/model/CartItem.java
src/main/java/com/example/ecommerce/model/Category.java
src/main/java/com/example/ecommerce/model/ERole.java
src/main/java/com/example/ecommerce/model/Order.java
src/main/java/com/example/ecommerce/model/OrderItem.java
src/main/java/com/example/ecommerce/model/OrderStatus.java
src/main/java/com/example/ecommerce/model/Payment.java
src/main/java/com/example/ecommerce/model/PaymentMethod.java
src/main/java/com/example/ecommerce/model/PaymentStatus.java
src/main/java/com/example/ecommerce/model/Product.java
src/main/java/com/example/ecommerce/model/Role.java
src/main/java/com/example/ecommerce/model/User.java
src/main/java/com/example/ecommerce/repository/CartItemRepository.java
src/main/java/com/example/ecommerce/repository/CartRepository.java
src/main/java/com/example/ecommerce/repository/CategoryRepository.java
src/main/java/com/example/ecommerce/repository/OrderItemRepository.java
src/main/java/com/example/ecommerce/repository/OrderRepository.java
src/main/java/com/example/ecommerce/repository/PaymentRepository.java
src/main/java/com/example/ecommerce/repository/ProductRepository.java
src/main/java/com/example/ecommerce/repository/RoleRepository.java
src/main/java/com/example/ecommerce/repository/UserRepository.java
src/main/java/com/example/ecommerce/security/jwt/AuthEntryPointJwt.java
src/main/java/com/example/ecommerce/security/jwt/AuthTokenFilter.java
src/main/java/com/example/ecommerce/security/jwt/JwtUtils.java
src/main/java/com/example/ecommerce/security/services/UserDetailsImpl.java
src/main/java/com/example/ecommerce/security/services/UserDetailsServiceImpl.java
src/main/java/com/example/ecommerce/security/WebSecurityConfig.java
src/main/java/com/example/ecommerce/service/CartService.java
src/main/java/com/example/ecommerce/util/PasswordEncryptor.java
src/main/resources/application.properties
src/main/resources/templates/error/403.html
src/main/resources/templates/error/404.html
src/main/resources/templates/error/500.html
src/main/resources/templates/error/error.html
src/main/resources/templates/forgot-password.html
src/main/resources/templates/index.html
src/main/resources/templates/layout/default.html
src/main/resources/templates/login.html
src/main/resources/templates/product-detail.html
src/main/resources/templates/product-list.html
src/main/resources/templates/profile.html
src/main/resources/templates/register.html
src/main/resources/templates/user-profile.html

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# 編譯輸出
/target/
/build/
*.class

# IDE 文件
.idea/
*.iml
.vscode/
.classpath
.project
.settings/

# 日誌文件
logs/
*.log

# 配置文件（可能包含敏感信息）
# 注意：如果您的配置文件包含敏感信息，應該將其排除
# application-*.properties
# application-*.yml

# 系統文件
.DS_Store
Thumbs.db

# Docker 相關
.docker/

# 其他
*.jar
*.war
*.ear
*.zip
*.tar.gz
*.rar

================
File: 1.txt
================
實作下面功能：
1. 會員管理：
   - 會員註冊時需要提供基本的個人資料，包括會員名稱、郵箱、密碼等。密碼需要進行加密存儲。 ok
   - 會員登錄後，系統會生成一個身份驗證令牌（例如JWT），會員在後續的操作中需要攜帶這個令牌來進行身份驗證。
   - 會員可以通過個人資料頁面修改自己的資料，例如修改郵箱、密碼等。 要驗證是否為本人修改
   - 會員可以瀏覽其他會員的個人資料頁面，比如暱稱、星座，查看其公開信息。 ok

2. 商品管理：
   - 商品信息需要包括商品名稱、描述、價格、庫存、分類等。這些信息存儲在MySQL資料庫中的商品表中。
   - 管理員需要一個管理介面來添加、編輯、刪除商品。
   - 會員可以通過分類、關鍵字搜索商品，系統需要提供相應的搜索接口。
   - 商品詳細信息需要提供一個單獨的頁面來展示，包括商品圖片、詳細描述、庫存情況等。

3. 購物車管理：
   - 每個會員都有一個購物車，購物車中包含會員選擇的商品及其數量。
   - 會員可以添加商品到購物車，系統需要提供相應的API來處理添加商品到購物車的請求。
   - 會員可以在購物車中調整商品數量，增加或減少商品數量。
   - 會員可以從購物車中刪除某個商品。

4. 訂單管理：
   - 會員在結算購物車時生成訂單，系統會根據購物車中的商品生成訂單項目。
   - 訂單信息包括訂單號、會員信息、商品清單、總價格、訂單狀態等。
   - 會員可以查看自己的訂單歷史，包括已完成和未完成的訂單。
   - 管理員可以查看所有訂單列表，管理訂單狀態，例如確認訂單、發貨、取消訂單等操作。

5. 支付管理：
   - 會員在結算訂單時可以選擇不同的支付方式，例如信用卡、支付寶、微信支付等。
   - 系統需要與相應的支付服務提供商進行接口對接，以實現支付功能。
   - 支付成功後，訂單狀態需要更新為已支付，庫存需要相應減少。

6. 技術要求：
	- 使用 JDK 21
	- 使用 Spring Boot 3以上版本的框架來實作整個系統。
	- 使用 Tomcat 運行系統。
	- 使用 MySQL 資料庫 8.0 以上版本。
	- 使用連接池來管理資料庫連接，資料庫連線密碼需進行加密不可以明碼出現在設定檔。
	- 使用 Swagger 說明 API 相關資訊。
	- 使用 Thymeleaf ，實作前端頁面。
    - 使用 Docker 安裝所有的環境
   
7. 交付內容
	- 需產出可執行的 JAR 或 WAR 及使用說明
	- 整個專案的 Workspace
	- DB Schema

8. 請加上繁體中文註解說明以方便新手容易閱讀

================
File: docker-compose.yml
================
version: '3.8'

services:
  # MySQL 數據庫服務
  mysql:
    image: mysql:8.0
    container_name: ecommerce-mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: ecommerce
      MYSQL_USER: ecommerce
      MYSQL_PASSWORD: ecommerce
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 電商系統應用服務
  app:
    build: .
    container_name: ecommerce-app
    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      # 數據庫連接配置
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/ecommerce?useSSL=false&serverTimezone=UTC&createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: rootpassword
      # JWT 配置 - 使用明文密鑰
      # 使用 SPRING_APPLICATION_JSON 設定多個配置
      SPRING_APPLICATION_JSON: '{"jwt":{"secret":"c2VjcmV0LWtleS1mb3ItZGV2ZWxvcG1lbnQtZW52aXJvbm1lbnQtc2hvdWxkLWJlLWNoYW5nZWQtaW4tcHJvZHVjdGlvbg==","expiration":86400000},"logging":{"level":{"org.springframework.security":"DEBUG"}}}'
      # Jasypt 加密密鑰
      JASYPT_ENCRYPTOR_PASSWORD: your_jasypt_password
    networks:
      - ecommerce-network
    restart: always

# 定義數據卷
volumes:
  mysql-data:
    driver: local

# 定義網絡
networks:
  ecommerce-network:
    driver: bridge

================
File: Dockerfile
================
# 使用 JDK 21 作為基礎映像
FROM eclipse-temurin:21-jdk-alpine

# 設置工作目錄
WORKDIR /app

# 複製 Maven 配置文件
COPY pom.xml .

# 複製源代碼
COPY src ./src

# 安裝 Maven 並構建應用程式
RUN apk add --no-cache maven && \
    mvn package -DskipTests && \
    mv target/*.jar app.jar && \
    rm -rf target && \
    apk del maven

# 暴露應用程式端口
EXPOSE 8080

# 設置 Jasypt 加密密鑰環境變數
ENV JASYPT_ENCRYPTOR_PASSWORD=your_jasypt_password

# 啟動應用程式
ENTRYPOINT ["java", "-jar", "app.jar"]

================
File: pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.0</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.example</groupId>
    <artifactId>ecommerce</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>ecommerce</name>
    <description>電商系統專案</description>
    
    <properties>
        <java.version>21</java.version>
    </properties>
    
    <dependencies>
        <!-- Spring Boot 核心依賴 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <dependency>
            <groupId>org.thymeleaf.extras</groupId>
            <artifactId>thymeleaf-extras-springsecurity6</artifactId>
        </dependency>
        
        <!-- 資料庫相關依賴 -->
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>com.zaxxer</groupId>
            <artifactId>HikariCP</artifactId>
        </dependency>
        
        <!-- 密碼加密相關依賴 -->
        <dependency>
            <groupId>com.github.ulisesbocchio</groupId>
            <artifactId>jasypt-spring-boot-starter</artifactId>
            <version>3.0.5</version>
        </dependency>
        
        <!-- JWT 相關依賴 -->
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-api</artifactId>
            <version>0.11.5</version>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-impl</artifactId>
            <version>0.11.5</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-jackson</artifactId>
            <version>0.11.5</version>
            <scope>runtime</scope>
        </dependency>
        
        <!-- Swagger/OpenAPI 相關依賴 -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>2.2.0</version>
        </dependency>
        
        <!-- Lombok 簡化開發 -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        
        <!-- 測試相關依賴 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>

================
File: README.md
================
# 電商系統使用說明

## 系統簡介

這是一個基於 Spring Boot 的電商系統，實現了會員管理、商品管理、購物車管理、訂單管理和支付管理等功能。系統使用 MySQL 作為數據庫，並支持使用 Docker 進行部署。

## 技術架構

- JDK 21
- Spring Boot 3.2.0
- Spring Security + JWT 身份驗證
- Spring Data JPA
- MySQL 8.0
- Thymeleaf 前端模板引擎
- Swagger/OpenAPI 文檔
- Docker 容器化部署

## 系統功能

1. **會員管理**
   - 會員註冊和登入
   - JWT 身份驗證
   - 會員資料修改
   - 會員公開資料查看

2. **商品管理**
   - 商品分類管理
   - 商品增刪改查
   - 商品搜索功能

3. **購物車管理**
   - 添加商品到購物車
   - 修改購物車商品數量
   - 刪除購物車商品
   - 清空購物車

4. **訂單管理**
   - 創建訂單
   - 訂單狀態管理
   - 訂單歷史查詢

5. **支付管理**
   - 訂單支付處理
   - 支付記錄查詢

## 部署指南

### 使用 Docker 部署

1. **安裝 Docker 和 Docker Compose**

   請確保您的系統已安裝 Docker 和 Docker Compose。如果尚未安裝，請參考以下官方文檔進行安裝：
   - Docker: https://docs.docker.com/get-docker/
   - Docker Compose: https://docs.docker.com/compose/install/

2. **克隆專案**

   ```bash
   git clone https://github.com/yourusername/ecommerce.git
   cd ecommerce
   ```

3. **修改配置**

   在 `docker-compose.yml` 文件中，您可以根據需要修改以下配置：
   - MySQL 數據庫的用戶名和密碼
   - Jasypt 加密密鑰（用於加密數據庫密碼等敏感信息）

4. **構建和啟動容器**

   ```bash
   docker-compose up -d
   ```

   這將會構建應用程式映像並啟動所有服務。首次啟動可能需要幾分鐘時間。

5. **訪問系統**

   系統啟動後，您可以通過以下方式訪問：
   - Web 應用程式：http://localhost:8080
   - API 文檔：http://localhost:8080/swagger-ui.html

### 使用 JAR 檔案部署

1. **安裝 JDK 21 和 MySQL 8.0**

   請確保您的系統已安裝 JDK 21 和 MySQL 8.0。

2. **創建數據庫**

   ```sql
   CREATE DATABASE ecommerce;
   ```

3. **構建專案**

   ```bash
   ./mvnw clean package -DskipTests
   ```

4. **運行應用程式**

   ```bash
   java -jar target/ecommerce-0.0.1-SNAPSHOT.jar
   ```

   您可以通過設置環境變數來自定義配置，例如：

   ```bash
   java -jar target/ecommerce-0.0.1-SNAPSHOT.jar \
     --spring.datasource.url=jdbc:mysql://localhost:3306/ecommerce \
     --spring.datasource.username=root \
     --spring.datasource.password=your_password \
     --jasypt.encryptor.password=your_jasypt_password
   ```

## 系統使用

### 管理員帳號

系統初始化時會自動創建一個管理員帳號：
- 用戶名：admin
- 密碼：admin123

請在首次登入後修改密碼。

### API 使用

系統提供了完整的 RESTful API，您可以通過 Swagger 文檔查看和測試這些 API：
http://localhost:8080/swagger-ui.html

主要 API 端點包括：
- `/api/auth/*` - 身份驗證相關 API
- `/api/users/*` - 用戶管理相關 API
- `/api/categories/*` - 商品分類相關 API
- `/api/products/*` - 商品管理相關 API
- `/api/cart/*` - 購物車相關 API
- `/api/orders/*` - 訂單相關 API
- `/api/payments/*` - 支付相關 API

## 數據庫結構

系統使用以下主要數據表：
- `users` - 存儲用戶資料
- `roles` - 存儲角色資料
- `user_roles` - 用戶和角色的關聯表
- `categories` - 存儲商品分類
- `products` - 存儲商品資料
- `carts` - 存儲購物車資料
- `cart_items` - 存儲購物車項目
- `orders` - 存儲訂單資料
- `order_items` - 存儲訂單項目
- `payments` - 存儲支付記錄

完整的數據庫結構可以通過 JPA 自動生成，或者參考 `src/main/resources/schema.sql`（如果有的話）。

## 開發指南

如果您想要進一步開發或修改系統，請參考以下步驟：

1. **克隆專案**

   ```bash
   git clone https://github.com/yourusername/ecommerce.git
   cd ecommerce
   ```

2. **導入到 IDE**

   您可以使用 IntelliJ IDEA、Eclipse 或 VS Code 等 IDE 導入專案。

3. **運行開發環境**

   您可以使用 Docker Compose 啟動只包含 MySQL 的開發環境：

   ```bash
   docker-compose up -d mysql
   ```

   然後在 IDE 中運行應用程式。

4. **修改代碼**

   根據需要修改代碼，主要的代碼結構如下：
   - `src/main/java/com/example/ecommerce/model` - 實體類
   - `src/main/java/com/example/ecommerce/repository` - 數據訪問層
   - `src/main/java/com/example/ecommerce/controller` - 控制器層
   - `src/main/java/com/example/ecommerce/security` - 安全相關代碼
   - `src/main/java/com/example/ecommerce/config` - 配置類
   - `src/main/resources` - 配置文件和靜態資源

5. **運行測試**

   ```bash
   ./mvnw test
   ```

6. **構建專案**

   ```bash
   ./mvnw clean package
   ```

## 故障排除

如果您在使用系統時遇到問題，請嘗試以下步驟：

1. **檢查日誌**

   查看應用程式日誌以獲取錯誤信息：

   ```bash
   docker-compose logs app
   ```

2. **檢查數據庫連接**

   確保應用程式可以連接到 MySQL 數據庫：

   ```bash
   docker-compose logs mysql
   ```

3. **重新啟動服務**

   如果服務無法正常工作，嘗試重新啟動：

   ```bash
   docker-compose restart
   ```

4. **重新構建應用程式**

   如果您修改了代碼，需要重新構建應用程式：

   ```bash
   docker-compose build app
   docker-compose up -d
   ```

## 聯繫支持

如果您有任何問題或建議，請聯繫我們：support@example.com

================
File: src/main/java/com/example/ecommerce/config/DataInitializer.java
================
package com.example.ecommerce.config;

import com.example.ecommerce.model.ERole;
import com.example.ecommerce.model.Role;
import com.example.ecommerce.model.User;
import com.example.ecommerce.repository.RoleRepository;
import com.example.ecommerce.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import java.util.HashSet;
import java.util.Set;

/**
 * 數據初始化類
 * 在應用程式啟動時初始化必要的數據
 */
@Component
public class DataInitializer implements CommandLineRunner {

    @Autowired
    private RoleRepository roleRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    /**
     * 在應用程式啟動時執行初始化
     */
    @Override
    public void run(String... args) throws Exception {
        // 初始化角色
        initRoles();
        
        // 初始化管理員帳號
        initAdminUser();
    }

    /**
     * 初始化角色
     */
    private void initRoles() {
        // 檢查角色是否已存在
        if (roleRepository.count() == 0) {
            // 創建用戶角色
            Role userRole = new Role();
            userRole.setName(ERole.ROLE_USER);
            roleRepository.save(userRole);

            // 創建管理員角色
            Role adminRole = new Role();
            adminRole.setName(ERole.ROLE_ADMIN);
            roleRepository.save(adminRole);

            System.out.println("角色初始化完成");
        }
    }

    /**
     * 初始化管理員帳號
     */
    private void initAdminUser() {
        // 檢查管理員帳號是否已存在
        if (!userRepository.existsByUsername("admin")) {
            // 創建管理員帳號
            User admin = new User();
            admin.setUsername("admin");
            admin.setEmail("admin@example.com");
            admin.setPassword(passwordEncoder.encode("admin123"));
            admin.setNickname("系統管理員");

            // 設置管理員角色
            Set<Role> roles = new HashSet<>();
            Role adminRole = roleRepository.findByName(ERole.ROLE_ADMIN)
                    .orElseThrow(() -> new RuntimeException("錯誤: 找不到管理員角色"));
            roles.add(adminRole);
            admin.setRoles(roles);

            userRepository.save(admin);

            System.out.println("管理員帳號初始化完成");
        }
    }
}

================
File: src/main/java/com/example/ecommerce/config/JasyptConfig.java
================
package com.example.ecommerce.config;

import org.jasypt.encryption.StringEncryptor;
import org.jasypt.encryption.pbe.PooledPBEStringEncryptor;
import org.jasypt.encryption.pbe.config.SimpleStringPBEConfig;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * Jasypt 加密配置類
 * 用於配置數據庫密碼等敏感資訊的加密
 */
@Configuration
public class JasyptConfig {

    /**
     * 從環境變數或配置文件中獲取加密密鑰
     */
    @Value("${jasypt.encryptor.password:your_jasypt_password}")
    private String password;

    /**
     * 配置 Jasypt 加密器
     * @return StringEncryptor 加密器
     */
    @Bean("jasyptStringEncryptor")
    public StringEncryptor stringEncryptor() {
        PooledPBEStringEncryptor encryptor = new PooledPBEStringEncryptor();
        SimpleStringPBEConfig config = new SimpleStringPBEConfig();
        
        // 設置加密密鑰
        config.setPassword(password);
        
        // 設置加密算法
        config.setAlgorithm("PBEWithMD5AndDES");
        
        // 設置密鑰獲取迭代次數
        config.setKeyObtentionIterations("1000");
        
        // 設置加密操作的池大小
        config.setPoolSize("1");
        
        // 設置提供者名稱
        config.setProviderName("SunJCE");
        
        // 設置隨機鹽生成器
        config.setSaltGeneratorClassName("org.jasypt.salt.RandomSaltGenerator");
        
        // 設置IV生成器
        config.setIvGeneratorClassName("org.jasypt.iv.NoIvGenerator");
        
        // 設置字符串輸出編碼格式
        config.setStringOutputType("base64");
        
        encryptor.setConfig(config);
        
        return encryptor;
    }
}

================
File: src/main/java/com/example/ecommerce/config/SwaggerConfig.java
================
package com.example.ecommerce.config;

import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * Swagger 配置類
 * 用於配置 API 文檔的顯示內容和安全設置
 */
@Configuration
public class SwaggerConfig {

    /**
     * 配置 OpenAPI 文檔
     * @return OpenAPI 配置
     */
    @Bean
    public OpenAPI openAPI() {
        return new OpenAPI()
                .info(new Info()
                        .title("電商系統 API")
                        .description("基於 Spring Boot 的電商系統 API 文檔")
                        .version("1.0.0")
                        .contact(new Contact()
                                .name("電商系統開發團隊")
                                .email("support@example.com")
                                .url("https://www.example.com"))
                        .license(new License()
                                .name("MIT License")
                                .url("https://opensource.org/licenses/MIT")))
                .addSecurityItem(new SecurityRequirement().addList("bearerAuth"))
                .components(new Components()
                        .addSecuritySchemes("bearerAuth", new SecurityScheme()
                                .name("bearerAuth")
                                .type(SecurityScheme.Type.HTTP)
                                .scheme("bearer")
                                .bearerFormat("JWT")));
    }
}

================
File: src/main/java/com/example/ecommerce/controller/AuthCheckController.java
================
package com.example.ecommerce.controller;

import com.example.ecommerce.dto.MessageResponse;
import com.example.ecommerce.security.services.UserDetailsImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.HashMap;
import java.util.Map;

/**
 * 身份驗證檢查控制器
 * 提供檢查用戶身份驗證狀態的API
 */
@RestController
@RequestMapping("/api/auth")
@Tag(name = "身份驗證檢查", description = "檢查用戶身份驗證狀態的API")
public class AuthCheckController {

    /**
     * 檢查用戶是否已登入
     * @return 用戶身份驗證狀態
     */
    @GetMapping("/check-auth")
    @Operation(summary = "檢查身份驗證狀態", description = "檢查當前用戶是否已登入")
    public ResponseEntity<?> checkAuth() {
        // 獲取當前身份驗證信息
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        
        // 檢查用戶是否已登入
        if (authentication != null && authentication.isAuthenticated() && 
            !authentication.getPrincipal().equals("anonymousUser")) {
            
            // 獲取用戶詳細信息
            UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
            
            // 構建響應數據
            Map<String, Object> response = new HashMap<>();
            response.put("authenticated", true);
            response.put("userId", userDetails.getId());
            response.put("username", userDetails.getUsername());
            response.put("email", userDetails.getEmail());
            response.put("roles", userDetails.getAuthorities());
            
            return ResponseEntity.ok(response);
        } else {
            // 用戶未登入
            return ResponseEntity.status(401).body(new MessageResponse("用戶未登入"));
        }
    }
}

================
File: src/main/java/com/example/ecommerce/controller/AuthController.java
================
package com.example.ecommerce.controller;

import com.example.ecommerce.dto.JwtResponse;
import com.example.ecommerce.dto.LoginRequest;
import com.example.ecommerce.dto.MessageResponse;
import com.example.ecommerce.dto.SignupRequest;
import com.example.ecommerce.model.ERole;
import com.example.ecommerce.model.Role;
import com.example.ecommerce.model.User;
import com.example.ecommerce.repository.RoleRepository;
import com.example.ecommerce.repository.UserRepository;
import com.example.ecommerce.security.jwt.JwtUtils;
import com.example.ecommerce.security.services.UserDetailsImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * 身份驗證控制器
 * 處理會員註冊和登入的API
 */
@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
@RequestMapping("/api/auth")
@Tag(name = "身份驗證", description = "會員註冊和登入的API")
public class AuthController {
    @Autowired
    AuthenticationManager authenticationManager;

    @Autowired
    UserRepository userRepository;

    @Autowired
    RoleRepository roleRepository;

    @Autowired
    PasswordEncoder encoder;

    @Autowired
    JwtUtils jwtUtils;

    /**
     * 會員登入API
     * @param loginRequest 登入請求資料
     * @return JWT令牌和會員資訊
     */
    @PostMapping("/signin")
    @Operation(summary = "會員登入", description = "會員使用用戶名和密碼登入系統")
    public ResponseEntity<?> authenticateUser(@Valid @RequestBody LoginRequest loginRequest) {
        // 驗證用戶名和密碼
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword()));

        // 設置安全上下文
        SecurityContextHolder.getContext().setAuthentication(authentication);
        
        // 生成JWT令牌
        String jwt = jwtUtils.generateJwtToken(authentication);
        
        // 獲取用戶詳細資訊
        UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
        
        // 獲取用戶角色
        List<String> roles = userDetails.getAuthorities().stream()
                .map(item -> item.getAuthority())
                .collect(Collectors.toList());

        // 返回JWT令牌和用戶資訊
        return ResponseEntity.ok(new JwtResponse(jwt,
                                                 userDetails.getId(),
                                                 userDetails.getUsername(),
                                                 userDetails.getEmail(),
                                                 roles));
    }

    /**
     * 會員註冊API
     * @param signUpRequest 註冊請求資料
     * @return 註冊結果訊息
     */
    @PostMapping("/signup")
    @Operation(summary = "會員註冊", description = "新會員註冊系統")
    public ResponseEntity<?> registerUser(@Valid @RequestBody SignupRequest signUpRequest) {
        // 檢查用戶名是否已存在
        if (userRepository.existsByUsername(signUpRequest.getUsername())) {
            return ResponseEntity
                    .badRequest()
                    .body(new MessageResponse("錯誤: 用戶名已被使用!"));
        }

        // 檢查電子郵件是否已存在
        if (userRepository.existsByEmail(signUpRequest.getEmail())) {
            return ResponseEntity
                    .badRequest()
                    .body(new MessageResponse("錯誤: 電子郵件已被使用!"));
        }

        // 創建新用戶
        User user = new User(signUpRequest.getUsername(),
                             signUpRequest.getEmail(),
                             encoder.encode(signUpRequest.getPassword()));

        // 設置用戶暱稱和星座
        user.setNickname(signUpRequest.getNickname());
        user.setZodiacSign(signUpRequest.getZodiacSign());

        // 設置用戶角色
        Set<String> strRoles = signUpRequest.getRoles();
        Set<Role> roles = new HashSet<>();

        if (strRoles == null) {
            // 如果沒有指定角色，則默認為普通用戶
            Role userRole = roleRepository.findByName(ERole.ROLE_USER)
                    .orElseThrow(() -> new RuntimeException("錯誤: 找不到用戶角色"));
            roles.add(userRole);
        } else {
            // 根據指定的角色設置用戶角色
            strRoles.forEach(role -> {
                switch (role) {
                    case "admin":
                        Role adminRole = roleRepository.findByName(ERole.ROLE_ADMIN)
                                .orElseThrow(() -> new RuntimeException("錯誤: 找不到管理員角色"));
                        roles.add(adminRole);
                        break;
                    default:
                        Role userRole = roleRepository.findByName(ERole.ROLE_USER)
                                .orElseThrow(() -> new RuntimeException("錯誤: 找不到用戶角色"));
                        roles.add(userRole);
                }
            });
        }

        user.setRoles(roles);
        userRepository.save(user);

        return ResponseEntity.ok(new MessageResponse("用戶註冊成功!"));
    }
}

================
File: src/main/java/com/example/ecommerce/controller/CartController.java
================
package com.example.ecommerce.controller;

import com.example.ecommerce.dto.CartItemRequest;
import com.example.ecommerce.dto.CartItemResponse;
import com.example.ecommerce.dto.CartResponse;
import com.example.ecommerce.dto.MessageResponse;
import com.example.ecommerce.model.Cart;
import com.example.ecommerce.model.CartItem;
import com.example.ecommerce.model.Product;
import com.example.ecommerce.model.User;
import com.example.ecommerce.repository.CartItemRepository;
import com.example.ecommerce.repository.CartRepository;
import com.example.ecommerce.repository.ProductRepository;
import com.example.ecommerce.repository.UserRepository;
import com.example.ecommerce.security.services.UserDetailsImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * 購物車控制器
 * 處理購物車的管理API
 */
@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
@RequestMapping("/api/cart")
@Tag(name = "購物車管理", description = "購物車的管理API")
@SecurityRequirement(name = "bearerAuth")
public class CartController {
    @Autowired
    private CartRepository cartRepository;

    @Autowired
    private CartItemRepository cartItemRepository;

    @Autowired
    private ProductRepository productRepository;

    @Autowired
    private UserRepository userRepository;

    /**
     * 獲取當前用戶的購物車
     * @return 購物車資訊
     */
    @GetMapping
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    @Operation(summary = "獲取購物車", description = "獲取當前用戶的購物車資訊")
    public ResponseEntity<CartResponse> getCart() {
        // 獲取當前登入的用戶
        User user = getCurrentUser();
        
        // 查找或創建用戶的購物車
        Cart cart = getOrCreateCart(user);
        
        // 將Cart實體轉換為CartResponse DTO
        CartResponse cartResponse = convertToCartResponse(cart);
        
        return ResponseEntity.ok(cartResponse);
    }

    /**
     * 添加商品到購物車
     * @param cartItemRequest 購物車項目資訊
     * @return 添加結果訊息
     */
    @PostMapping("/items")
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    @Operation(summary = "添加商品到購物車", description = "添加商品到當前用戶的購物車")
    public ResponseEntity<?> addItemToCart(@Valid @RequestBody CartItemRequest cartItemRequest) {
        // 獲取當前登入的用戶
        User user = getCurrentUser();
        
        // 查找或創建用戶的購物車
        Cart cart = getOrCreateCart(user);
        
        // 查找商品
        Product product = productRepository.findById(cartItemRequest.getProductId())
                .orElseThrow(() -> new RuntimeException("找不到商品"));
        
        // 檢查庫存是否足夠
        if (product.getStock() < cartItemRequest.getQuantity()) {
            return ResponseEntity.badRequest().body(new MessageResponse("錯誤: 商品庫存不足!"));
        }
        
        // 檢查購物車中是否已有該商品
        Optional<CartItem> existingItem = cartItemRepository.findByCartAndProduct(cart, product);
        
        if (existingItem.isPresent()) {
            // 如果購物車中已有該商品，則更新數量
            CartItem cartItem = existingItem.get();
            int newQuantity = cartItem.getQuantity() + cartItemRequest.getQuantity();
            
            // 再次檢查庫存是否足夠
            if (product.getStock() < newQuantity) {
                return ResponseEntity.badRequest().body(new MessageResponse("錯誤: 商品庫存不足!"));
            }
            
            cartItem.setQuantity(newQuantity);
            cartItemRepository.save(cartItem);
        } else {
            // 如果購物車中沒有該商品，則創建新的購物車項目
            CartItem cartItem = new CartItem();
            cartItem.setCart(cart);
            cartItem.setProduct(product);
            cartItem.setQuantity(cartItemRequest.getQuantity());
            cartItemRepository.save(cartItem);
        }
        
        return ResponseEntity.ok(new MessageResponse("商品已添加到購物車!"));
    }

    /**
     * 更新購物車項目數量
     * @param itemId 購物車項目ID
     * @param cartItemRequest 更新的購物車項目資訊
     * @return 更新結果訊息
     */
    @PutMapping("/items/{itemId}")
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    @Operation(summary = "更新購物車項目", description = "更新購物車中商品的數量")
    public ResponseEntity<?> updateCartItem(@PathVariable Long itemId, @Valid @RequestBody CartItemRequest cartItemRequest) {
        // 獲取當前登入的用戶
        User user = getCurrentUser();
        
        // 查找用戶的購物車
        Cart cart = cartRepository.findByUser(user)
                .orElseThrow(() -> new RuntimeException("找不到購物車"));
        
        // 查找購物車項目
        CartItem cartItem = cartItemRepository.findById(itemId)
                .orElseThrow(() -> new RuntimeException("找不到購物車項目"));
        
        // 驗證該購物車項目是否屬於當前用戶
        if (!cartItem.getCart().getId().equals(cart.getId())) {
            return ResponseEntity.badRequest().body(new MessageResponse("錯誤: 無權限修改此購物車項目!"));
        }
        
        // 查找商品
        Product product = productRepository.findById(cartItemRequest.getProductId())
                .orElseThrow(() -> new RuntimeException("找不到商品"));
        
        // 檢查庫存是否足夠
        if (product.getStock() < cartItemRequest.getQuantity()) {
            return ResponseEntity.badRequest().body(new MessageResponse("錯誤: 商品庫存不足!"));
        }
        
        // 更新購物車項目
        cartItem.setProduct(product);
        cartItem.setQuantity(cartItemRequest.getQuantity());
        cartItemRepository.save(cartItem);
        
        return ResponseEntity.ok(new MessageResponse("購物車項目已更新!"));
    }

    /**
     * 從購物車中刪除項目
     * @param itemId 購物車項目ID
     * @return 刪除結果訊息
     */
    @DeleteMapping("/items/{itemId}")
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    @Operation(summary = "刪除購物車項目", description = "從購物車中刪除商品")
    public ResponseEntity<?> removeCartItem(@PathVariable Long itemId) {
        // 獲取當前登入的用戶
        User user = getCurrentUser();
        
        // 查找用戶的購物車
        Cart cart = cartRepository.findByUser(user)
                .orElseThrow(() -> new RuntimeException("找不到購物車"));
        
        // 查找購物車項目
        CartItem cartItem = cartItemRepository.findById(itemId)
                .orElseThrow(() -> new RuntimeException("找不到購物車項目"));
        
        // 驗證該購物車項目是否屬於當前用戶
        if (!cartItem.getCart().getId().equals(cart.getId())) {
            return ResponseEntity.badRequest().body(new MessageResponse("錯誤: 無權限刪除此購物車項目!"));
        }
        
        // 刪除購物車項目
        cartItemRepository.delete(cartItem);
        
        return ResponseEntity.ok(new MessageResponse("商品已從購物車中刪除!"));
    }

    /**
     * 清空購物車
     * @return 清空結果訊息
     */
    @DeleteMapping
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    @Operation(summary = "清空購物車", description = "清空當前用戶的購物車")
    public ResponseEntity<?> clearCart() {
        // 獲取當前登入的用戶
        User user = getCurrentUser();
        
        // 查找用戶的購物車
        Cart cart = cartRepository.findByUser(user)
                .orElseThrow(() -> new RuntimeException("找不到購物車"));
        
        // 刪除購物車中的所有項目
        cartItemRepository.deleteByCart(cart);
        
        return ResponseEntity.ok(new MessageResponse("購物車已清空!"));
    }

    /**
     * 獲取當前登入的用戶
     * @return 用戶實體
     */
    private User getCurrentUser() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
        return userRepository.findById(userDetails.getId())
                .orElseThrow(() -> new RuntimeException("找不到用戶"));
    }

    /**
     * 查找或創建用戶的購物車
     * @param user 用戶實體
     * @return 購物車實體
     */
    private Cart getOrCreateCart(User user) {
        Optional<Cart> optionalCart = cartRepository.findByUser(user);
        
        if (optionalCart.isPresent()) {
            return optionalCart.get();
        } else {
            Cart newCart = new Cart();
            newCart.setUser(user);
            return cartRepository.save(newCart);
        }
    }

    /**
     * 將Cart實體轉換為CartResponse DTO
     * @param cart Cart實體
     * @return CartResponse DTO
     */
    private CartResponse convertToCartResponse(Cart cart) {
        CartResponse cartResponse = new CartResponse();
        cartResponse.setId(cart.getId());
        cartResponse.setUserId(cart.getUser().getId());
        
        List<CartItemResponse> itemResponses = new ArrayList<>();
        BigDecimal totalAmount = BigDecimal.ZERO;
        int totalItems = 0;
        
        for (CartItem item : cart.getCartItems()) {
            CartItemResponse itemResponse = new CartItemResponse();
            itemResponse.setId(item.getId());
            itemResponse.setProductId(item.getProduct().getId());
            itemResponse.setProductName(item.getProduct().getName());
            itemResponse.setPrice(item.getProduct().getPrice());
            itemResponse.setQuantity(item.getQuantity());
            
            // 計算小計金額
            BigDecimal subtotal = item.getProduct().getPrice().multiply(new BigDecimal(item.getQuantity()));
            itemResponse.setSubtotal(subtotal);
            
            itemResponse.setImageUrl(item.getProduct().getImageUrl());
            
            itemResponses.add(itemResponse);
            
            // 累加總金額和總數量
            totalAmount = totalAmount.add(subtotal);
            totalItems += item.getQuantity();
        }
        
        cartResponse.setItems(itemResponses);
        cartResponse.setTotalAmount(totalAmount);
        cartResponse.setTotalItems(totalItems);
        
        return cartResponse;
    }
}

================
File: src/main/java/com/example/ecommerce/controller/CategoryController.java
================
package com.example.ecommerce.controller;

import com.example.ecommerce.dto.MessageResponse;
import com.example.ecommerce.model.Category;
import com.example.ecommerce.repository.CategoryRepository;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

/**
 * 商品分類控制器
 * 處理商品分類的管理API
 */
@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
@RequestMapping("/api/categories")
@Tag(name = "商品分類管理", description = "商品分類的增刪改查API")
public class CategoryController {
    @Autowired
    private CategoryRepository categoryRepository;

    /**
     * 獲取所有商品分類
     * @return 商品分類列表
     */
    @GetMapping
    @Operation(summary = "獲取所有分類", description = "獲取所有商品分類的列表")
    public ResponseEntity<List<Category>> getAllCategories() {
        List<Category> categories = categoryRepository.findAll();
        return ResponseEntity.ok(categories);
    }

    /**
     * 根據ID獲取商品分類
     * @param id 分類ID
     * @return 商品分類資訊
     */
    @GetMapping("/{id}")
    @Operation(summary = "獲取分類詳情", description = "根據ID獲取商品分類的詳細資訊")
    public ResponseEntity<?> getCategoryById(@PathVariable Long id) {
        Category category = categoryRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("找不到分類"));
        return ResponseEntity.ok(category);
    }

    /**
     * 創建新的商品分類
     * @param category 商品分類資訊
     * @return 創建結果訊息
     */
    @PostMapping
    @PreAuthorize("hasRole('ADMIN')")
    @SecurityRequirement(name = "bearerAuth")
    @Operation(summary = "創建分類", description = "創建新的商品分類（需要管理員權限）")
    public ResponseEntity<?> createCategory(@Valid @RequestBody Category category) {
        // 檢查分類名稱是否已存在
        if (categoryRepository.existsByName(category.getName())) {
            return ResponseEntity
                    .badRequest()
                    .body(new MessageResponse("錯誤: 分類名稱已存在!"));
        }

        // 創建新分類
        categoryRepository.save(category);
        return ResponseEntity.ok(new MessageResponse("分類創建成功!"));
    }

    /**
     * 更新商品分類
     * @param id 分類ID
     * @param updates 要更新的資料
     * @return 更新結果訊息
     */
    @PutMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    @SecurityRequirement(name = "bearerAuth")
    @Operation(summary = "更新分類", description = "更新商品分類的資訊（需要管理員權限）")
    public ResponseEntity<?> updateCategory(@PathVariable Long id, @Valid @RequestBody Map<String, String> updates) {
        // 查找要更新的分類
        Category category = categoryRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("找不到分類"));

        // 更新分類資料
        if (updates.containsKey("name")) {
            String newName = updates.get("name");
            // 檢查新名稱是否已被其他分類使用
            if (!newName.equals(category.getName()) && categoryRepository.existsByName(newName)) {
                return ResponseEntity.badRequest().body(new MessageResponse("錯誤: 分類名稱已存在!"));
            }
            category.setName(newName);
        }

        if (updates.containsKey("description")) {
            category.setDescription(updates.get("description"));
        }

        // 保存更新後的分類
        categoryRepository.save(category);
        return ResponseEntity.ok(new MessageResponse("分類更新成功!"));
    }

    /**
     * 刪除商品分類
     * @param id 分類ID
     * @return 刪除結果訊息
     */
    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    @SecurityRequirement(name = "bearerAuth")
    @Operation(summary = "刪除分類", description = "刪除商品分類（需要管理員權限）")
    public ResponseEntity<?> deleteCategory(@PathVariable Long id) {
        // 查找要刪除的分類
        Category category = categoryRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("找不到分類"));

        // 檢查該分類是否有關聯的商品
        if (!category.getProducts().isEmpty()) {
            return ResponseEntity.badRequest().body(new MessageResponse("錯誤: 該分類下還有商品，無法刪除!"));
        }

        // 刪除分類
        categoryRepository.delete(category);
        return ResponseEntity.ok(new MessageResponse("分類刪除成功!"));
    }
}

================
File: src/main/java/com/example/ecommerce/controller/ErrorController.java
================
package com.example.ecommerce.controller;

import org.springframework.boot.web.servlet.error.ErrorController;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import jakarta.servlet.http.HttpServletRequest;

/**
 * 錯誤處理控制器
 * 用於處理系統錯誤並顯示自定義錯誤頁面
 */
@Controller
public class CustomErrorController implements ErrorController {

    /**
     * 處理所有錯誤請求
     * @param request HTTP請求
     * @param model 視圖模型
     * @return 錯誤頁面視圖名稱
     */
    @RequestMapping("/error")
    public String handleError(HttpServletRequest request, Model model) {
        // 獲取錯誤狀態碼
        Integer statusCode = (Integer) request.getAttribute("jakarta.servlet.error.status_code");
        
        // 獲取錯誤信息
        String errorMessage = (String) request.getAttribute("jakarta.servlet.error.message");
        if (errorMessage == null || errorMessage.isEmpty()) {
            errorMessage = "發生未知錯誤";
        }
        
        // 將錯誤信息添加到模型中
        model.addAttribute("statusCode", statusCode);
        model.addAttribute("errorMessage", errorMessage);
        
        // 根據錯誤狀態碼返回不同的錯誤頁面
        if (statusCode != null) {
            if (statusCode == 404) {
                return "error/404";
            } else if (statusCode == 403) {
                return "error/403";
            } else if (statusCode == 500) {
                return "error/500";
            }
        }
        
        // 默認錯誤頁面
        return "error/error";
    }
}

================
File: src/main/java/com/example/ecommerce/controller/OrderController.java
================
package com.example.ecommerce.controller;

import com.example.ecommerce.dto.*;
import com.example.ecommerce.model.*;
import com.example.ecommerce.repository.*;
import com.example.ecommerce.security.services.UserDetailsImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

/**
 * 訂單控制器
 * 處理訂單的創建、查詢和管理API
 */
@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
@RequestMapping("/api/orders")
@Tag(name = "訂單管理", description = "訂單的創建、查詢和管理API")
@SecurityRequirement(name = "bearerAuth")
public class OrderController {
    @Autowired
    private OrderRepository orderRepository;

    @Autowired
    private OrderItemRepository orderItemRepository;

    @Autowired
    private CartRepository cartRepository;

    @Autowired
    private CartItemRepository cartItemRepository;

    @Autowired
    private ProductRepository productRepository;

    @Autowired
    private UserRepository userRepository;

    /**
     * 創建訂單
     * @param orderRequest 訂單請求資料
     * @return 創建的訂單資訊
     */
    @PostMapping
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    @Transactional
    @Operation(summary = "創建訂單", description = "根據購物車內容創建新訂單")
    public ResponseEntity<?> createOrder(@Valid @RequestBody OrderRequest orderRequest) {
        // 獲取當前登入的用戶
        User user = getCurrentUser();
        
        // 查找用戶的購物車
        Cart cart = cartRepository.findByUser(user)
                .orElseThrow(() -> new RuntimeException("找不到購物車"));
        
        // 檢查購物車是否為空
        if (cart.getCartItems().isEmpty()) {
            return ResponseEntity.badRequest().body(new MessageResponse("錯誤: 購物車為空，無法創建訂單!"));
        }
        
        // 檢查商品庫存是否足夠
        for (CartItem cartItem : cart.getCartItems()) {
            Product product = cartItem.getProduct();
            if (product.getStock() < cartItem.getQuantity()) {
                return ResponseEntity.badRequest().body(
                        new MessageResponse("錯誤: 商品 '" + product.getName() + "' 庫存不足!"));
            }
        }
        
        // 創建訂單
        Order order = new Order();
        order.setOrderNumber(generateOrderNumber());
        order.setUser(user);
        order.setStatus(OrderStatus.PENDING_PAYMENT);
        order.setOrderDate(LocalDateTime.now());
        order.setShippingAddress(orderRequest.getShippingAddress());
        order.setPaymentMethod(orderRequest.getPaymentMethod());
        order.setIsPaid(false);
        
        // 保存訂單
        Order savedOrder = orderRepository.save(order);
        
        // 創建訂單項目
        List<OrderItem> orderItems = new ArrayList<>();
        for (CartItem cartItem : cart.getCartItems()) {
            Product product = cartItem.getProduct();
            
            OrderItem orderItem = new OrderItem();
            orderItem.setOrder(savedOrder);
            orderItem.setProductId(product.getId());
            orderItem.setProductName(product.getName());
            orderItem.setPrice(product.getPrice());
            orderItem.setQuantity(cartItem.getQuantity());
            orderItem.setImageUrl(product.getImageUrl());
            
            orderItems.add(orderItem);
            
            // 減少商品庫存
            product.setStock(product.getStock() - cartItem.getQuantity());
            productRepository.save(product);
        }
        
        // 保存訂單項目
        orderItemRepository.saveAll(orderItems);
        
        // 計算訂單總金額
        savedOrder.setOrderItems(orderItems);
        savedOrder.calculateTotalAmount();
        orderRepository.save(savedOrder);
        
        // 清空購物車
        cartItemRepository.deleteByCart(cart);
        
        // 轉換為DTO返回
        OrderResponse orderResponse = convertToOrderResponse(savedOrder);
        
        return ResponseEntity.ok(orderResponse);
    }

    /**
     * 獲取當前用戶的所有訂單
     * @param page 頁碼（從0開始）
     * @param size 每頁大小
     * @param sortBy 排序欄位
     * @param direction 排序方向（asc或desc）
     * @return 訂單列表
     */
    @GetMapping
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    @Operation(summary = "獲取用戶訂單", description = "獲取當前用戶的所有訂單")
    public ResponseEntity<List<OrderResponse>> getUserOrders(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(defaultValue = "orderDate") String sortBy,
            @RequestParam(defaultValue = "desc") String direction) {
        
        // 獲取當前登入的用戶
        User user = getCurrentUser();
        
        // 創建分頁和排序參數
        Sort.Direction sortDirection = direction.equalsIgnoreCase("desc") ? Sort.Direction.DESC : Sort.Direction.ASC;
        Pageable pageable = PageRequest.of(page, size, Sort.by(sortDirection, sortBy));
        
        // 查詢訂單
        Page<Order> orderPage = orderRepository.findByUser(user, pageable);
        
        // 將Order實體轉換為OrderResponse DTO
        List<OrderResponse> orderResponses = orderPage.getContent().stream()
                .map(this::convertToOrderResponse)
                .collect(Collectors.toList());
        
        return ResponseEntity.ok(orderResponses);
    }

    /**
     * 獲取所有訂單（管理員專用）
     * @param page 頁碼（從0開始）
     * @param size 每頁大小
     * @param sortBy 排序欄位
     * @param direction 排序方向（asc或desc）
     * @return 訂單列表
     */
    @GetMapping("/all")
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "獲取所有訂單", description = "獲取系統中的所有訂單（管理員專用）")
    public ResponseEntity<List<OrderResponse>> getAllOrders(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(defaultValue = "orderDate") String sortBy,
            @RequestParam(defaultValue = "desc") String direction) {
        
        // 創建分頁和排序參數
        Sort.Direction sortDirection = direction.equalsIgnoreCase("desc") ? Sort.Direction.DESC : Sort.Direction.ASC;
        Pageable pageable = PageRequest.of(page, size, Sort.by(sortDirection, sortBy));
        
        // 查詢訂單
        Page<Order> orderPage = orderRepository.findAll(pageable);
        
        // 將Order實體轉換為OrderResponse DTO
        List<OrderResponse> orderResponses = orderPage.getContent().stream()
                .map(this::convertToOrderResponse)
                .collect(Collectors.toList());
        
        return ResponseEntity.ok(orderResponses);
    }

    /**
     * 根據訂單ID獲取訂單詳情
     * @param id 訂單ID
     * @return 訂單詳情
     */
    @GetMapping("/{id}")
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    @Operation(summary = "獲取訂單詳情", description = "根據ID獲取訂單的詳細資訊")
    public ResponseEntity<?> getOrderById(@PathVariable Long id) {
        // 查找訂單
        Order order = orderRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("找不到訂單"));
        
        // 獲取當前登入的用戶
        User user = getCurrentUser();
        
        // 檢查權限（只有訂單所屬用戶或管理員可以查看）
        if (!order.getUser().getId().equals(user.getId()) && 
                !user.getRoles().stream().anyMatch(role -> role.getName() == ERole.ROLE_ADMIN)) {
            return ResponseEntity.badRequest().body(new MessageResponse("錯誤: 無權限查看此訂單!"));
        }
        
        // 轉換為DTO返回
        OrderResponse orderResponse = convertToOrderResponse(order);
        
        return ResponseEntity.ok(orderResponse);
    }

    /**
     * 更新訂單狀態（管理員專用）
     * @param id 訂單ID
     * @param status 新的訂單狀態
     * @return 更新結果訊息
     */
    @PutMapping("/{id}/status")
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "更新訂單狀態", description = "更新訂單的狀態（管理員專用）")
    public ResponseEntity<?> updateOrderStatus(
            @PathVariable Long id,
            @RequestParam OrderStatus status) {
        
        // 查找訂單
        Order order = orderRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("找不到訂單"));
        
        // 更新訂單狀態
        order.setStatus(status);
        orderRepository.save(order);
        
        return ResponseEntity.ok(new MessageResponse("訂單狀態已更新!"));
    }

    /**
     * 取消訂單
     * @param id 訂單ID
     * @return 取消結果訊息
     */
    @PutMapping("/{id}/cancel")
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    @Transactional
    @Operation(summary = "取消訂單", description = "取消未支付的訂單")
    public ResponseEntity<?> cancelOrder(@PathVariable Long id) {
        // 查找訂單
        Order order = orderRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("找不到訂單"));
        
        // 獲取當前登入的用戶
        User user = getCurrentUser();
        
        // 檢查權限（只有訂單所屬用戶或管理員可以取消）
        if (!order.getUser().getId().equals(user.getId()) && 
                !user.getRoles().stream().anyMatch(role -> role.getName() == ERole.ROLE_ADMIN)) {
            return ResponseEntity.badRequest().body(new MessageResponse("錯誤: 無權限取消此訂單!"));
        }
        
        // 檢查訂單狀態（只有待付款的訂單可以取消）
        if (order.getStatus() != OrderStatus.PENDING_PAYMENT) {
            return ResponseEntity.badRequest().body(new MessageResponse("錯誤: 只有待付款的訂單可以取消!"));
        }
        
        // 恢復商品庫存
        for (OrderItem orderItem : order.getOrderItems()) {
            Product product = productRepository.findById(orderItem.getProductId())
                    .orElseThrow(() -> new RuntimeException("找不到商品"));
            
            product.setStock(product.getStock() + orderItem.getQuantity());
            productRepository.save(product);
        }
        
        // 更新訂單狀態為已取消
        order.setStatus(OrderStatus.CANCELLED);
        orderRepository.save(order);
        
        return ResponseEntity.ok(new MessageResponse("訂單已取消!"));
    }

    /**
     * 生成訂單編號
     * @return 訂單編號
     */
    private String generateOrderNumber() {
        // 使用UUID生成唯一的訂單編號
        return "ORD-" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();
    }

    /**
     * 獲取當前登入的用戶
     * @return 用戶實體
     */
    private User getCurrentUser() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
        return userRepository.findById(userDetails.getId())
                .orElseThrow(() -> new RuntimeException("找不到用戶"));
    }

    /**
     * 將Order實體轉換為OrderResponse DTO
     * @param order Order實體
     * @return OrderResponse DTO
     */
    private OrderResponse convertToOrderResponse(Order order) {
        OrderResponse orderResponse = new OrderResponse();
        orderResponse.setId(order.getId());
        orderResponse.setOrderNumber(order.getOrderNumber());
        orderResponse.setUserId(order.getUser().getId());
        orderResponse.setUsername(order.getUser().getUsername());
        orderResponse.setTotalAmount(order.getTotalAmount());
        orderResponse.setStatus(order.getStatus());
        orderResponse.setOrderDate(order.getOrderDate());
        orderResponse.setShippingAddress(order.getShippingAddress());
        orderResponse.setPaymentMethod(order.getPaymentMethod());
        orderResponse.setIsPaid(order.getIsPaid());
        orderResponse.setPaidAt(order.getPaidAt());
        
        List<OrderItemResponse> itemResponses = new ArrayList<>();
        for (OrderItem item : order.getOrderItems()) {
            OrderItemResponse itemResponse = new OrderItemResponse();
            itemResponse.setId(item.getId());
            itemResponse.setProductId(item.getProductId());
            itemResponse.setProductName(item.getProductName());
            itemResponse.setPrice(item.getPrice());
            itemResponse.setQuantity(item.getQuantity());
            
            // 計算小計金額
            BigDecimal subtotal = item.getPrice().multiply(new BigDecimal(item.getQuantity()));
            itemResponse.setSubtotal(subtotal);
            
            itemResponse.setImageUrl(item.getImageUrl());
            
            itemResponses.add(itemResponse);
        }
        
        orderResponse.setItems(itemResponses);
        
        return orderResponse;
    }
}

================
File: src/main/java/com/example/ecommerce/controller/PaymentController.java
================
package com.example.ecommerce.controller;

import com.example.ecommerce.dto.MessageResponse;
import com.example.ecommerce.dto.PaymentRequest;
import com.example.ecommerce.dto.PaymentResponse;
import com.example.ecommerce.model.*;
import com.example.ecommerce.repository.OrderRepository;
import com.example.ecommerce.repository.PaymentRepository;
import com.example.ecommerce.repository.UserRepository;
import com.example.ecommerce.security.services.UserDetailsImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.UUID;

/**
 * 支付控制器
 * 處理訂單支付相關的API
 */
@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
@RequestMapping("/api/payments")
@Tag(name = "支付管理", description = "訂單支付相關的API")
@SecurityRequirement(name = "bearerAuth")
public class PaymentController {
    @Autowired
    private PaymentRepository paymentRepository;

    @Autowired
    private OrderRepository orderRepository;

    @Autowired
    private UserRepository userRepository;

    /**
     * 處理訂單支付
     * @param paymentRequest 支付請求資料
     * @return 支付結果資訊
     */
    @PostMapping
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    @Transactional
    @Operation(summary = "處理訂單支付", description = "處理用戶的訂單支付請求")
    public ResponseEntity<?> processPayment(@Valid @RequestBody PaymentRequest paymentRequest) {
        // 獲取當前登入的用戶
        User user = getCurrentUser();
        
        // 查找訂單
        Order order = orderRepository.findById(paymentRequest.getOrderId())
                .orElseThrow(() -> new RuntimeException("找不到訂單"));
        
        // 檢查權限（只有訂單所屬用戶可以支付）
        if (!order.getUser().getId().equals(user.getId())) {
            return ResponseEntity.badRequest().body(new MessageResponse("錯誤: 無權限支付此訂單!"));
        }
        
        // 檢查訂單狀態（只有待付款的訂單可以支付）
        if (order.getStatus() != OrderStatus.PENDING_PAYMENT) {
            return ResponseEntity.badRequest().body(new MessageResponse("錯誤: 該訂單狀態不允許支付!"));
        }
        
        // 檢查訂單是否已經支付
        if (order.getIsPaid()) {
            return ResponseEntity.badRequest().body(new MessageResponse("錯誤: 該訂單已經支付!"));
        }
        
        // 檢查是否已存在支付記錄
        if (paymentRepository.findByOrder(order).isPresent()) {
            return ResponseEntity.badRequest().body(new MessageResponse("錯誤: 該訂單已有支付記錄!"));
        }
        
        // 創建支付記錄
        Payment payment = new Payment();
        payment.setPaymentNumber(generatePaymentNumber());
        payment.setOrder(order);
        payment.setAmount(order.getTotalAmount());
        
        // 設置支付方式
        PaymentMethod paymentMethod;
        try {
            paymentMethod = PaymentMethod.valueOf(paymentRequest.getPaymentMethod());
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest().body(new MessageResponse("錯誤: 無效的支付方式!"));
        }
        payment.setPaymentMethod(paymentMethod);
        
        // 在實際系統中，這裡應該調用第三方支付服務進行實際支付處理
        // 為了演示，我們假設支付成功
        payment.setStatus(PaymentStatus.COMPLETED);
        payment.setPaymentTime(LocalDateTime.now());
        payment.setTransactionId("TXN-" + UUID.randomUUID().toString().substring(0, 8).toUpperCase());
        
        // 保存支付記錄
        Payment savedPayment = paymentRepository.save(payment);
        
        // 更新訂單狀態
        order.setStatus(OrderStatus.PAID);
        order.setIsPaid(true);
        order.setPaidAt(LocalDateTime.now());
        orderRepository.save(order);
        
        // 轉換為DTO返回
        PaymentResponse paymentResponse = convertToPaymentResponse(savedPayment);
        
        return ResponseEntity.ok(paymentResponse);
    }

    /**
     * 獲取訂單的支付記錄
     * @param orderId 訂單ID
     * @return 支付記錄資訊
     */
    @GetMapping("/order/{orderId}")
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    @Operation(summary = "獲取訂單支付記錄", description = "獲取指定訂單的支付記錄")
    public ResponseEntity<?> getPaymentByOrderId(@PathVariable Long orderId) {
        // 獲取當前登入的用戶
        User user = getCurrentUser();
        
        // 查找訂單
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new RuntimeException("找不到訂單"));
        
        // 檢查權限（只有訂單所屬用戶或管理員可以查看）
        if (!order.getUser().getId().equals(user.getId()) && 
                !user.getRoles().stream().anyMatch(role -> role.getName() == ERole.ROLE_ADMIN)) {
            return ResponseEntity.badRequest().body(new MessageResponse("錯誤: 無權限查看此支付記錄!"));
        }
        
        // 查找支付記錄
        Payment payment = paymentRepository.findByOrder(order)
                .orElseThrow(() -> new RuntimeException("找不到支付記錄"));
        
        // 轉換為DTO返回
        PaymentResponse paymentResponse = convertToPaymentResponse(payment);
        
        return ResponseEntity.ok(paymentResponse);
    }

    /**
     * 生成支付編號
     * @return 支付編號
     */
    private String generatePaymentNumber() {
        // 使用UUID生成唯一的支付編號
        return "PAY-" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();
    }

    /**
     * 獲取當前登入的用戶
     * @return 用戶實體
     */
    private User getCurrentUser() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
        return userRepository.findById(userDetails.getId())
                .orElseThrow(() -> new RuntimeException("找不到用戶"));
    }

    /**
     * 將Payment實體轉換為PaymentResponse DTO
     * @param payment Payment實體
     * @return PaymentResponse DTO
     */
    private PaymentResponse convertToPaymentResponse(Payment payment) {
        PaymentResponse paymentResponse = new PaymentResponse();
        paymentResponse.setId(payment.getId());
        paymentResponse.setPaymentNumber(payment.getPaymentNumber());
        paymentResponse.setOrderId(payment.getOrder().getId());
        paymentResponse.setOrderNumber(payment.getOrder().getOrderNumber());
        paymentResponse.setAmount(payment.getAmount());
        paymentResponse.setPaymentMethod(payment.getPaymentMethod());
        paymentResponse.setStatus(payment.getStatus());
        paymentResponse.setPaymentTime(payment.getPaymentTime());
        paymentResponse.setTransactionId(payment.getTransactionId());
        return paymentResponse;
    }
}

================
File: src/main/java/com/example/ecommerce/controller/ProductController.java
================
package com.example.ecommerce.controller;

import com.example.ecommerce.dto.MessageResponse;
import com.example.ecommerce.dto.ProductRequest;
import com.example.ecommerce.dto.ProductResponse;
import com.example.ecommerce.model.Category;
import com.example.ecommerce.model.Product;
import com.example.ecommerce.repository.CategoryRepository;
import com.example.ecommerce.repository.ProductRepository;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

/**
 * 商品控制器
 * 處理商品的管理和查詢API
 */
@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
@RequestMapping("/api/products")
@Tag(name = "商品管理", description = "商品的增刪改查API")
public class ProductController {
    @Autowired
    private ProductRepository productRepository;

    @Autowired
    private CategoryRepository categoryRepository;

    /**
     * 獲取所有商品（分頁）
     * @param page 頁碼（從0開始）
     * @param size 每頁大小
     * @param sortBy 排序欄位
     * @param direction 排序方向（asc或desc）
     * @return 商品分頁結果
     */
    @GetMapping
    @Operation(summary = "獲取所有商品", description = "分頁獲取所有商品的列表")
    public ResponseEntity<List<ProductResponse>> getAllProducts(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(defaultValue = "id") String sortBy,
            @RequestParam(defaultValue = "asc") String direction) {
        
        // 創建分頁和排序參數
        Sort.Direction sortDirection = direction.equalsIgnoreCase("desc") ? Sort.Direction.DESC : Sort.Direction.ASC;
        Pageable pageable = PageRequest.of(page, size, Sort.by(sortDirection, sortBy));
        
        // 查詢商品
        Page<Product> productPage = productRepository.findAll(pageable);
        
        // 將Product實體轉換為ProductResponse DTO
        List<ProductResponse> productResponses = productPage.getContent().stream()
                .map(this::convertToProductResponse)
                .collect(Collectors.toList());
        
        return ResponseEntity.ok(productResponses);
    }

    /**
     * 根據分類獲取商品（分頁）
     * @param categoryId 分類ID
     * @param page 頁碼（從0開始）
     * @param size 每頁大小
     * @return 商品分頁結果
     */
    @GetMapping("/category/{categoryId}")
    @Operation(summary = "根據分類獲取商品", description = "分頁獲取指定分類下的商品列表")
    public ResponseEntity<List<ProductResponse>> getProductsByCategory(
            @PathVariable Long categoryId,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size) {
        
        // 查找分類
        Category category = categoryRepository.findById(categoryId)
                .orElseThrow(() -> new RuntimeException("找不到分類"));
        
        // 創建分頁參數
        Pageable pageable = PageRequest.of(page, size);
        
        // 查詢商品
        Page<Product> productPage = productRepository.findByCategory(category, pageable);
        
        // 將Product實體轉換為ProductResponse DTO
        List<ProductResponse> productResponses = productPage.getContent().stream()
                .map(this::convertToProductResponse)
                .collect(Collectors.toList());
        
        return ResponseEntity.ok(productResponses);
    }

    /**
     * 根據關鍵字搜索商品（分頁）
     * @param keyword 搜索關鍵字
     * @param page 頁碼（從0開始）
     * @param size 每頁大小
     * @return 商品分頁結果
     */
    @GetMapping("/search")
    @Operation(summary = "搜索商品", description = "根據關鍵字搜索商品")
    public ResponseEntity<List<ProductResponse>> searchProducts(
            @RequestParam String keyword,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size) {
        
        // 創建分頁參數
        Pageable pageable = PageRequest.of(page, size);
        
        // 搜索商品
        Page<Product> productPage = productRepository.searchByKeyword(keyword, pageable);
        
        // 將Product實體轉換為ProductResponse DTO
        List<ProductResponse> productResponses = productPage.getContent().stream()
                .map(this::convertToProductResponse)
                .collect(Collectors.toList());
        
        return ResponseEntity.ok(productResponses);
    }

    /**
     * 根據ID獲取商品詳情
     * @param id 商品ID
     * @return 商品詳情
     */
    @GetMapping("/{id}")
    @Operation(summary = "獲取商品詳情", description = "根據ID獲取商品的詳細資訊")
    public ResponseEntity<ProductResponse> getProductById(@PathVariable Long id) {
        // 查找商品
        Product product = productRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("找不到商品"));
        
        // 將Product實體轉換為ProductResponse DTO
        ProductResponse productResponse = convertToProductResponse(product);
        
        return ResponseEntity.ok(productResponse);
    }

    /**
     * 創建新商品
     * @param productRequest 商品資訊
     * @return 創建結果訊息
     */
    @PostMapping
    @PreAuthorize("hasRole('ADMIN')")
    @SecurityRequirement(name = "bearerAuth")
    @Operation(summary = "創建商品", description = "創建新的商品（需要管理員權限）")
    public ResponseEntity<?> createProduct(@Valid @RequestBody ProductRequest productRequest) {
        // 查找分類
        Category category = categoryRepository.findById(productRequest.getCategoryId())
                .orElseThrow(() -> new RuntimeException("找不到分類"));
        
        // 創建新商品
        Product product = new Product();
        product.setName(productRequest.getName());
        product.setDescription(productRequest.getDescription());
        product.setPrice(productRequest.getPrice());
        product.setStock(productRequest.getStock());
        product.setCategory(category);
        product.setImageUrl(productRequest.getImageUrl());
        
        // 保存商品
        productRepository.save(product);
        
        return ResponseEntity.ok(new MessageResponse("商品創建成功!"));
    }

    /**
     * 更新商品資訊
     * @param id 商品ID
     * @param productRequest 更新的商品資訊
     * @return 更新結果訊息
     */
    @PutMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    @SecurityRequirement(name = "bearerAuth")
    @Operation(summary = "更新商品", description = "更新商品的資訊（需要管理員權限）")
    public ResponseEntity<?> updateProduct(@PathVariable Long id, @Valid @RequestBody ProductRequest productRequest) {
        // 查找商品
        Product product = productRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("找不到商品"));
        
        // 查找分類
        Category category = categoryRepository.findById(productRequest.getCategoryId())
                .orElseThrow(() -> new RuntimeException("找不到分類"));
        
        // 更新商品資訊
        product.setName(productRequest.getName());
        product.setDescription(productRequest.getDescription());
        product.setPrice(productRequest.getPrice());
        product.setStock(productRequest.getStock());
        product.setCategory(category);
        product.setImageUrl(productRequest.getImageUrl());
        
        // 保存更新後的商品
        productRepository.save(product);
        
        return ResponseEntity.ok(new MessageResponse("商品更新成功!"));
    }

    /**
     * 刪除商品
     * @param id 商品ID
     * @return 刪除結果訊息
     */
    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    @SecurityRequirement(name = "bearerAuth")
    @Operation(summary = "刪除商品", description = "刪除商品（需要管理員權限）")
    public ResponseEntity<?> deleteProduct(@PathVariable Long id) {
        // 查找商品
        Product product = productRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("找不到商品"));
        
        // 刪除商品
        productRepository.delete(product);
        
        return ResponseEntity.ok(new MessageResponse("商品刪除成功!"));
    }

    /**
     * 將Product實體轉換為ProductResponse DTO
     * @param product Product實體
     * @return ProductResponse DTO
     */
    private ProductResponse convertToProductResponse(Product product) {
        ProductResponse response = new ProductResponse();
        response.setId(product.getId());
        response.setName(product.getName());
        response.setDescription(product.getDescription());
        response.setPrice(product.getPrice());
        response.setStock(product.getStock());
        response.setCategoryId(product.getCategory().getId());
        response.setCategoryName(product.getCategory().getName());
        response.setImageUrl(product.getImageUrl());
        return response;
    }
}

================
File: src/main/java/com/example/ecommerce/controller/UserController.java
================
package com.example.ecommerce.controller;

import com.example.ecommerce.dto.MessageResponse;
import com.example.ecommerce.model.User;
import com.example.ecommerce.repository.UserRepository;
import com.example.ecommerce.security.services.UserDetailsImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

/**
 * 用戶控制器
 * 處理會員資料的查詢和修改的API
 */
@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
@RequestMapping("/api/users")
@Tag(name = "用戶管理", description = "會員資料的查詢和修改的API")
@SecurityRequirement(name = "bearerAuth")
public class UserController {
    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder encoder;

    /**
     * 獲取當前登入會員的資料
     * @return 會員資料
     */
    @GetMapping("/me")
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    @Operation(summary = "獲取當前會員資料", description = "獲取當前登入會員的詳細資料")
    public ResponseEntity<?> getCurrentUser() {
        // 獲取當前登入的用戶
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
        
        // 從數據庫中查詢完整的用戶資料
        User user = userRepository.findById(userDetails.getId())
                .orElseThrow(() -> new RuntimeException("找不到用戶"));
        
        // 創建返回的資料映射，排除敏感資訊
        Map<String, Object> response = new HashMap<>();
        response.put("id", user.getId());
        response.put("username", user.getUsername());
        response.put("email", user.getEmail());
        response.put("nickname", user.getNickname());
        response.put("zodiacSign", user.getZodiacSign());
        
        return ResponseEntity.ok(response);
    }

    /**
     * 根據ID獲取會員的公開資料
     * @param id 會員ID
     * @return 會員公開資料
     */
    @GetMapping("/{id}")
    @Operation(summary = "獲取會員公開資料", description = "根據ID獲取會員的公開資料")
    public ResponseEntity<?> getUserPublicProfile(@PathVariable Long id) {
        // 從數據庫中查詢用戶資料
        User user = userRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("找不到用戶"));
        
        // 創建返回的資料映射，只包含公開資訊
        Map<String, Object> response = new HashMap<>();
        response.put("id", user.getId());
        response.put("username", user.getUsername());
        response.put("nickname", user.getNickname());
        response.put("zodiacSign", user.getZodiacSign());
        
        return ResponseEntity.ok(response);
    }

    /**
     * 更新當前會員的資料
     * @param updates 要更新的資料
     * @return 更新結果訊息
     */
    @PutMapping("/me")
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    @Operation(summary = "更新會員資料", description = "更新當前登入會員的資料")
    public ResponseEntity<?> updateCurrentUser(@Valid @RequestBody Map<String, String> updates) {
        // 獲取當前登入的用戶
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
        
        // 從數據庫中查詢完整的用戶資料
        User user = userRepository.findById(userDetails.getId())
                .orElseThrow(() -> new RuntimeException("找不到用戶"));
        
        // 更新用戶資料
        if (updates.containsKey("email")) {
            // 檢查電子郵件是否已被其他用戶使用
            String newEmail = updates.get("email");
            if (!newEmail.equals(user.getEmail()) && userRepository.existsByEmail(newEmail)) {
                return ResponseEntity.badRequest().body(new MessageResponse("錯誤: 電子郵件已被使用!"));
            }
            user.setEmail(newEmail);
        }
        
        if (updates.containsKey("password")) {
            // 更新密碼（加密後存儲）
            user.setPassword(encoder.encode(updates.get("password")));
        }
        
        if (updates.containsKey("nickname")) {
            user.setNickname(updates.get("nickname"));
        }
        
        if (updates.containsKey("zodiacSign")) {
            user.setZodiacSign(updates.get("zodiacSign"));
        }
        
        // 保存更新後的用戶資料
        userRepository.save(user);
        
        return ResponseEntity.ok(new MessageResponse("用戶資料更新成功!"));
    }
}

================
File: src/main/java/com/example/ecommerce/controller/ViewController.java
================
package com.example.ecommerce.controller;

import com.example.ecommerce.model.Category;
import com.example.ecommerce.model.Product;
import com.example.ecommerce.repository.CategoryRepository;
import com.example.ecommerce.repository.ProductRepository;
import com.example.ecommerce.service.CartService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import java.util.List;

/**
 * 視圖控制器
 * 用於處理前端頁面的路由和數據
 */
@Controller
public class ViewController {

    @Autowired
    private CategoryRepository categoryRepository;

    @Autowired
    private ProductRepository productRepository;
    
    @Autowired
    private CartService cartService;

    /**
     * 首頁路由
     * @param model 模型數據
     * @return 首頁視圖名稱
     */
    @GetMapping("/")
    public String index(Model model) {
        // 獲取所有分類
        List<Category> categories = categoryRepository.findAll();
        model.addAttribute("categories", categories);
        
        // 獲取熱門商品（這裡簡單地取最新的4個商品作為熱門商品）
        Pageable featuredPageable = PageRequest.of(0, 4, Sort.by("id").descending());
        Page<Product> featuredProductsPage = productRepository.findAll(featuredPageable);
        model.addAttribute("featuredProducts", featuredProductsPage.getContent());
        
        // 獲取最新商品
        Pageable newPageable = PageRequest.of(0, 4, Sort.by("id").descending());
        Page<Product> newProductsPage = productRepository.findAll(newPageable);
        model.addAttribute("newProducts", newProductsPage.getContent());
        
        // 獲取購物車商品數量
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication != null && authentication.isAuthenticated() && 
            !authentication.getPrincipal().equals("anonymousUser")) {
            Integer cartItemCount = cartService.getCartItemCount();
            model.addAttribute("cartItemCount", cartItemCount);
        }
        
        return "index";
    }

    /**
     * 登入頁面路由
     * @return 登入頁面視圖名稱
     */
    @GetMapping("/login")
    public String login() {
        return "login";
    }

    /**
     * 註冊頁面路由
     * @return 註冊頁面視圖名稱
     */
    @GetMapping("/register")
    public String register() {
        return "register";
    }

    /**
     * 忘記密碼頁面路由
     * @return 忘記密碼頁面視圖名稱
     */
    @GetMapping("/forgot-password")
    public String forgotPassword() {
        return "forgot-password";
    }

    /**
     * 個人資料頁面路由
     * @param model 模型數據
     * @return 個人資料頁面視圖名稱
     */
    @GetMapping("/profile")
    public String profile(Model model) {
        // 獲取當前用戶資料
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication != null && authentication.isAuthenticated() && 
            !authentication.getPrincipal().equals("anonymousUser")) {
            // 這裡可以添加用戶資料到模型中
        }
        
        return "profile";
    }

    /**
     * 會員資料頁面路由
     * @param id 會員ID
     * @param model 模型數據
     * @return 會員資料頁面視圖名稱
     */
    @GetMapping("/user/{id}")
    public String userProfile(@PathVariable Long id, Model model) {
        // 這裡可以添加會員公開資料到模型中
        
        return "user-profile";
    }
    
    /**
     * 商品列表頁面路由
     * @param model 模型數據
     * @return 商品列表頁面視圖名稱
     */
    @GetMapping("/products")
    public String productList(Model model) {
        // 獲取所有分類
        List<Category> categories = categoryRepository.findAll();
        model.addAttribute("categories", categories);
        
        // 獲取所有商品（分頁）
        Pageable pageable = PageRequest.of(0, 12, Sort.by("id").descending());
        Page<Product> productsPage = productRepository.findAll(pageable);
        model.addAttribute("products", productsPage.getContent());
        model.addAttribute("currentPage", productsPage.getNumber());
        model.addAttribute("totalPages", productsPage.getTotalPages());
        
        return "product-list";
    }
    
    /**
     * 商品詳情頁面路由
     * @param id 商品ID
     * @param model 模型數據
     * @return 商品詳情頁面視圖名稱
     */
    @GetMapping("/products/{id}")
    public String productDetail(@PathVariable Long id, Model model) {
        // 獲取商品詳情
        productRepository.findById(id).ifPresent(product -> {
            model.addAttribute("product", product);
            
            // 獲取相關商品（同一分類的其他商品）
            if (product.getCategory() != null) {
                Pageable pageable = PageRequest.of(0, 4);
                Page<Product> relatedProductsPage = productRepository.findByCategory(
                    product.getCategory(), pageable);
                model.addAttribute("relatedProducts", relatedProductsPage.getContent());
            }
        });
        
        return "product-detail";
    }
    
    /**
     * 購物車頁面路由
     * @param model 模型數據
     * @return 購物車頁面視圖名稱
     */
    @GetMapping("/cart")
    public String cart(Model model) {
        // 獲取購物車資料
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication != null && authentication.isAuthenticated() && 
            !authentication.getPrincipal().equals("anonymousUser")) {
            model.addAttribute("cart", cartService.getCart());
        }
        
        return "cart";
    }
    
    /**
     * 訂單列表頁面路由
     * @param model 模型數據
     * @return 訂單列表頁面視圖名稱
     */
    @GetMapping("/orders")
    public String orderList(Model model) {
        // 獲取用戶訂單資料
        
        return "order-list";
    }
    
    /**
     * 訂單詳情頁面路由
     * @param id 訂單ID
     * @param model 模型數據
     * @return 訂單詳情頁面視圖名稱
     */
    @GetMapping("/orders/{id}")
    public String orderDetail(@PathVariable Long id, Model model) {
        // 獲取訂單詳情
        
        return "order-detail";
    }
    
    /**
     * 結帳頁面路由
     * @param model 模型數據
     * @return 結帳頁面視圖名稱
     */
    @GetMapping("/checkout")
    public String checkout(Model model) {
        // 獲取購物車資料
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication != null && authentication.isAuthenticated() && 
            !authentication.getPrincipal().equals("anonymousUser")) {
            model.addAttribute("cart", cartService.getCart());
        }
        
        return "checkout";
    }
}

================
File: src/main/java/com/example/ecommerce/dto/CartItemRequest.java
================
package com.example.ecommerce.dto;

import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Positive;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * 購物車項目請求DTO
 * 用於接收添加商品到購物車或更新購物車項目時提交的資料
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class CartItemRequest {
    /**
     * 商品ID，不可為空
     */
    @NotNull(message = "商品ID不能為空")
    private Long productId;
    
    /**
     * 商品數量，必須為正數
     */
    @NotNull(message = "商品數量不能為空")
    @Positive(message = "商品數量必須大於零")
    private Integer quantity;
}

================
File: src/main/java/com/example/ecommerce/dto/CartItemResponse.java
================
package com.example.ecommerce.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;

/**
 * 購物車項目回應DTO
 * 用於向客戶端返回購物車項目資訊
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class CartItemResponse {
    /**
     * 購物車項目ID
     */
    private Long id;
    
    /**
     * 商品ID
     */
    private Long productId;
    
    /**
     * 商品名稱
     */
    private String productName;
    
    /**
     * 商品價格
     */
    private BigDecimal price;
    
    /**
     * 商品數量
     */
    private Integer quantity;
    
    /**
     * 項目小計金額
     */
    private BigDecimal subtotal;
    
    /**
     * 商品圖片URL
     */
    private String imageUrl;
}

================
File: src/main/java/com/example/ecommerce/dto/CartResponse.java
================
package com.example.ecommerce.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * 購物車回應DTO
 * 用於向客戶端返回購物車資訊
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class CartResponse {
    /**
     * 購物車ID
     */
    private Long id;
    
    /**
     * 使用者ID
     */
    private Long userId;
    
    /**
     * 購物車中的商品項目列表
     */
    private List<CartItemResponse> items = new ArrayList<>();
    
    /**
     * 購物車總金額
     */
    private BigDecimal totalAmount;
    
    /**
     * 購物車中的商品總數量
     */
    private Integer totalItems;
}

================
File: src/main/java/com/example/ecommerce/dto/JwtResponse.java
================
package com.example.ecommerce.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;

/**
 * 會員登入回應DTO
 * 用於向客戶端返回登入成功後的資訊
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class JwtResponse {
    /**
     * JWT令牌
     */
    private String token;
    
    /**
     * 令牌類型，通常為"Bearer"
     */
    private String type = "Bearer";
    
    /**
     * 使用者ID
     */
    private Long id;
    
    /**
     * 使用者名稱
     */
    private String username;
    
    /**
     * 使用者電子郵件
     */
    private String email;
    
    /**
     * 使用者角色列表
     */
    private List<String> roles;

    /**
     * 建構子，用於創建JWT回應
     */
    public JwtResponse(String token, Long id, String username, String email, List<String> roles) {
        this.token = token;
        this.id = id;
        this.username = username;
        this.email = email;
        this.roles = roles;
    }
}

================
File: src/main/java/com/example/ecommerce/dto/LoginRequest.java
================
package com.example.ecommerce.dto;

import jakarta.validation.constraints.NotBlank;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * 會員登入請求DTO
 * 用於接收會員登入時提交的資料
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class LoginRequest {
    /**
     * 使用者名稱，不可為空
     */
    @NotBlank
    private String username;

    /**
     * 密碼，不可為空
     */
    @NotBlank
    private String password;
}

================
File: src/main/java/com/example/ecommerce/dto/MessageResponse.java
================
package com.example.ecommerce.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * 通用回應訊息DTO
 * 用於向客戶端返回操作結果的訊息
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class MessageResponse {
    /**
     * 回應訊息內容
     */
    private String message;
}

================
File: src/main/java/com/example/ecommerce/dto/OrderItemResponse.java
================
package com.example.ecommerce.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;

/**
 * 訂單項目回應DTO
 * 用於向客戶端返回訂單項目資訊
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class OrderItemResponse {
    /**
     * 訂單項目ID
     */
    private Long id;
    
    /**
     * 商品ID
     */
    private Long productId;
    
    /**
     * 商品名稱
     */
    private String productName;
    
    /**
     * 商品單價
     */
    private BigDecimal price;
    
    /**
     * 商品數量
     */
    private Integer quantity;
    
    /**
     * 項目小計金額
     */
    private BigDecimal subtotal;
    
    /**
     * 商品圖片URL
     */
    private String imageUrl;
}

================
File: src/main/java/com/example/ecommerce/dto/OrderRequest.java
================
package com.example.ecommerce.dto;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * 訂單請求DTO
 * 用於接收創建訂單時提交的資料
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class OrderRequest {
    /**
     * 收貨地址，不可為空
     */
    @NotBlank(message = "收貨地址不能為空")
    private String shippingAddress;
    
    /**
     * 支付方式，不可為空
     */
    @NotNull(message = "支付方式不能為空")
    private String paymentMethod;
    
    /**
     * 訂單備註
     */
    private String note;
}

================
File: src/main/java/com/example/ecommerce/dto/OrderResponse.java
================
package com.example.ecommerce.dto;

import com.example.ecommerce.model.OrderStatus;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * 訂單回應DTO
 * 用於向客戶端返回訂單資訊
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class OrderResponse {
    /**
     * 訂單ID
     */
    private Long id;
    
    /**
     * 訂單編號
     */
    private String orderNumber;
    
    /**
     * 使用者ID
     */
    private Long userId;
    
    /**
     * 使用者名稱
     */
    private String username;
    
    /**
     * 訂單中的商品項目列表
     */
    private List<OrderItemResponse> items = new ArrayList<>();
    
    /**
     * 訂單總金額
     */
    private BigDecimal totalAmount;
    
    /**
     * 訂單狀態
     */
    private OrderStatus status;
    
    /**
     * 訂單創建時間
     */
    private LocalDateTime orderDate;
    
    /**
     * 收貨地址
     */
    private String shippingAddress;
    
    /**
     * 支付方式
     */
    private String paymentMethod;
    
    /**
     * 是否已支付
     */
    private Boolean isPaid;
    
    /**
     * 支付時間
     */
    private LocalDateTime paidAt;
}

================
File: src/main/java/com/example/ecommerce/dto/PaymentRequest.java
================
package com.example.ecommerce.dto;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * 支付請求DTO
 * 用於接收支付訂單時提交的資料
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class PaymentRequest {
    /**
     * 訂單ID，不可為空
     */
    @NotNull(message = "訂單ID不能為空")
    private Long orderId;
    
    /**
     * 支付方式，不可為空
     */
    @NotBlank(message = "支付方式不能為空")
    private String paymentMethod;
    
    /**
     * 支付相關的其他資訊，如信用卡號碼等
     */
    private String paymentDetails;
}

================
File: src/main/java/com/example/ecommerce/dto/PaymentResponse.java
================
package com.example.ecommerce.dto;

import com.example.ecommerce.model.PaymentMethod;
import com.example.ecommerce.model.PaymentStatus;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;
import java.time.LocalDateTime;

/**
 * 支付回應DTO
 * 用於向客戶端返回支付資訊
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class PaymentResponse {
    /**
     * 支付ID
     */
    private Long id;
    
    /**
     * 支付編號
     */
    private String paymentNumber;
    
    /**
     * 訂單ID
     */
    private Long orderId;
    
    /**
     * 訂單編號
     */
    private String orderNumber;
    
    /**
     * 支付金額
     */
    private BigDecimal amount;
    
    /**
     * 支付方式
     */
    private PaymentMethod paymentMethod;
    
    /**
     * 支付狀態
     */
    private PaymentStatus status;
    
    /**
     * 支付時間
     */
    private LocalDateTime paymentTime;
    
    /**
     * 第三方交易編號
     */
    private String transactionId;
}

================
File: src/main/java/com/example/ecommerce/dto/ProductRequest.java
================
package com.example.ecommerce.dto;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Positive;
import jakarta.validation.constraints.PositiveOrZero;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;

/**
 * 商品請求DTO
 * 用於接收創建或更新商品時提交的資料
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class ProductRequest {
    /**
     * 商品名稱，不可為空
     */
    @NotBlank(message = "商品名稱不能為空")
    private String name;

    /**
     * 商品描述
     */
    private String description;

    /**
     * 商品價格，必須為正數
     */
    @NotNull(message = "商品價格不能為空")
    @Positive(message = "商品價格必須大於零")
    private BigDecimal price;

    /**
     * 商品庫存，必須為非負數
     */
    @NotNull(message = "商品庫存不能為空")
    @PositiveOrZero(message = "商品庫存不能為負數")
    private Integer stock;

    /**
     * 商品分類ID，不可為空
     */
    @NotNull(message = "商品分類不能為空")
    private Long categoryId;

    /**
     * 商品圖片URL
     */
    private String imageUrl;
}

================
File: src/main/java/com/example/ecommerce/dto/ProductResponse.java
================
package com.example.ecommerce.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;

/**
 * 商品回應DTO
 * 用於向客戶端返回商品資訊
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class ProductResponse {
    /**
     * 商品ID
     */
    private Long id;
    
    /**
     * 商品名稱
     */
    private String name;
    
    /**
     * 商品描述
     */
    private String description;
    
    /**
     * 商品價格
     */
    private BigDecimal price;
    
    /**
     * 商品庫存
     */
    private Integer stock;
    
    /**
     * 商品分類ID
     */
    private Long categoryId;
    
    /**
     * 商品分類名稱
     */
    private String categoryName;
    
    /**
     * 商品圖片URL
     */
    private String imageUrl;
}

================
File: src/main/java/com/example/ecommerce/dto/SignupRequest.java
================
package com.example.ecommerce.dto;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.Set;

/**
 * 會員註冊請求DTO
 * 用於接收會員註冊時提交的資料
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class SignupRequest {
    /**
     * 使用者名稱，不可為空且長度在3到20之間
     */
    @NotBlank
    @Size(min = 3, max = 20)
    private String username;

    /**
     * 電子郵件，不可為空且必須符合電子郵件格式
     */
    @NotBlank
    @Size(max = 50)
    @Email
    private String email;

    /**
     * 使用者角色集合，可選
     */
    private Set<String> roles;

    /**
     * 密碼，不可為空且長度在6到40之間
     */
    @NotBlank
    @Size(min = 6, max = 40)
    private String password;
    
    /**
     * 暱稱，可選
     */
    @Size(max = 50)
    private String nickname;
    
    /**
     * 星座，可選
     */
    @Size(max = 20)
    private String zodiacSign;
}

================
File: src/main/java/com/example/ecommerce/EcommerceApplication.java
================
package com.example.ecommerce;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

/**
 * 電商系統主應用程式類
 * 這是Spring Boot應用程式的入口點
 */
@SpringBootApplication
public class EcommerceApplication {

    public static void main(String[] args) {
        SpringApplication.run(EcommerceApplication.class, args);
    }
}

================
File: src/main/java/com/example/ecommerce/model/Cart.java
================
package com.example.ecommerce.model;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.ArrayList;
import java.util.List;

/**
 * 購物車實體類
 * 用於存儲使用者的購物車資訊
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "carts")
public class Cart {
    /**
     * 購物車ID，主鍵
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * 購物車所屬的使用者，一對一關係
     */
    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", unique = true)
    private User user;

    /**
     * 購物車中的商品項目，一對多關係
     */
    @OneToMany(mappedBy = "cart", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<CartItem> cartItems = new ArrayList<>();
}

================
File: src/main/java/com/example/ecommerce/model/CartItem.java
================
package com.example.ecommerce.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Positive;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * 購物車項目實體類
 * 用於存儲購物車中的單個商品項目
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "cart_items")
public class CartItem {
    /**
     * 購物車項目ID，主鍵
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * 所屬的購物車，多對一關係
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "cart_id")
    private Cart cart;

    /**
     * 購物車項目對應的商品，多對一關係
     */
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "product_id")
    private Product product;

    /**
     * 商品數量，必須為正數
     */
    @NotNull
    @Positive
    private Integer quantity;
}

================
File: src/main/java/com/example/ecommerce/model/Category.java
================
package com.example.ecommerce.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.ArrayList;
import java.util.List;

/**
 * 商品分類實體類
 * 用於對商品進行分類管理
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "categories")
public class Category {
    /**
     * 分類ID，主鍵
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * 分類名稱，不可為空且唯一
     */
    @NotBlank
    @Column(length = 50, unique = true)
    private String name;

    /**
     * 分類描述
     */
    @Column(length = 200)
    private String description;

    /**
     * 該分類下的所有商品，一對多關係
     */
    @OneToMany(mappedBy = "category", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Product> products = new ArrayList<>();
}

================
File: src/main/java/com/example/ecommerce/model/ERole.java
================
package com.example.ecommerce.model;

/**
 * 角色枚舉類型
 * 定義系統中的角色類型
 */
public enum ERole {
    /**
     * 一般使用者角色
     */
    ROLE_USER,
    
    /**
     * 管理員角色
     */
    ROLE_ADMIN
}

================
File: src/main/java/com/example/ecommerce/model/Order.java
================
package com.example.ecommerce.model;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * 訂單實體類
 * 用於存儲使用者的訂單資訊
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "orders")
public class Order {
    /**
     * 訂單ID，主鍵
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * 訂單編號，唯一
     */
    @Column(unique = true)
    private String orderNumber;

    /**
     * 訂單所屬的使用者，多對一關係
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id")
    private User user;

    /**
     * 訂單中的商品項目，一對多關係
     */
    @OneToMany(mappedBy = "order", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<OrderItem> orderItems = new ArrayList<>();

    /**
     * 訂單總金額
     */
    private BigDecimal totalAmount;

    /**
     * 訂單狀態
     */
    @Enumerated(EnumType.STRING)
    private OrderStatus status;

    /**
     * 訂單創建時間
     */
    private LocalDateTime orderDate;

    /**
     * 收貨地址
     */
    private String shippingAddress;

    /**
     * 支付方式
     */
    private String paymentMethod;

    /**
     * 是否已支付
     */
    private Boolean isPaid = false;

    /**
     * 支付時間
     */
    private LocalDateTime paidAt;
    
    /**
     * 計算訂單總金額的方法
     */
    public void calculateTotalAmount() {
        this.totalAmount = orderItems.stream()
                .map(item -> item.getPrice().multiply(new BigDecimal(item.getQuantity())))
                .reduce(BigDecimal.ZERO, BigDecimal::add);
    }
}

================
File: src/main/java/com/example/ecommerce/model/OrderItem.java
================
package com.example.ecommerce.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Positive;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;

/**
 * 訂單項目實體類
 * 用於存儲訂單中的單個商品項目
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "order_items")
public class OrderItem {
    /**
     * 訂單項目ID，主鍵
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * 所屬的訂單，多對一關係
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "order_id")
    private Order order;

    /**
     * 商品ID，記錄商品的ID
     */
    private Long productId;

    /**
     * 商品名稱，記錄下單時的商品名稱
     */
    private String productName;

    /**
     * 商品單價，記錄下單時的商品價格
     */
    @NotNull
    private BigDecimal price;

    /**
     * 商品數量，必須為正數
     */
    @NotNull
    @Positive
    private Integer quantity;

    /**
     * 商品圖片URL，記錄下單時的商品圖片
     */
    private String imageUrl;
}

================
File: src/main/java/com/example/ecommerce/model/OrderStatus.java
================
package com.example.ecommerce.model;

/**
 * 訂單狀態枚舉類型
 * 定義訂單的各種狀態
 */
public enum OrderStatus {
    /**
     * 待付款：訂單已創建但尚未付款
     */
    PENDING_PAYMENT,
    
    /**
     * 已付款：訂單已付款但尚未發貨
     */
    PAID,
    
    /**
     * 已發貨：訂單已發貨但尚未送達
     */
    SHIPPED,
    
    /**
     * 已完成：訂單已送達並完成
     */
    COMPLETED,
    
    /**
     * 已取消：訂單被取消
     */
    CANCELLED,
    
    /**
     * 退款中：訂單正在處理退款
     */
    REFUNDING,
    
    /**
     * 已退款：訂單已完成退款
     */
    REFUNDED
}

================
File: src/main/java/com/example/ecommerce/model/Payment.java
================
package com.example.ecommerce.model;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;
import java.time.LocalDateTime;

/**
 * 支付記錄實體類
 * 用於存儲訂單的支付資訊
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "payments")
public class Payment {
    /**
     * 支付記錄ID，主鍵
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * 支付編號，唯一
     */
    @Column(unique = true)
    private String paymentNumber;

    /**
     * 關聯的訂單，一對一關係
     */
    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "order_id", unique = true)
    private Order order;

    /**
     * 支付金額
     */
    private BigDecimal amount;

    /**
     * 支付方式
     */
    @Enumerated(EnumType.STRING)
    private PaymentMethod paymentMethod;

    /**
     * 支付狀態
     */
    @Enumerated(EnumType.STRING)
    private PaymentStatus status;

    /**
     * 支付時間
     */
    private LocalDateTime paymentTime;

    /**
     * 第三方支付平台的交易編號
     */
    private String transactionId;
}

================
File: src/main/java/com/example/ecommerce/model/PaymentMethod.java
================
package com.example.ecommerce.model;

/**
 * 支付方式枚舉類型
 * 定義系統支持的支付方式
 */
public enum PaymentMethod {
    /**
     * 信用卡支付
     */
    CREDIT_CARD,
    
    /**
     * 支付寶支付
     */
    ALIPAY,
    
    /**
     * 微信支付
     */
    WECHAT_PAY,
    
    /**
     * 銀行轉帳
     */
    BANK_TRANSFER,
    
    /**
     * 貨到付款
     */
    CASH_ON_DELIVERY
}

================
File: src/main/java/com/example/ecommerce/model/PaymentStatus.java
================
package com.example.ecommerce.model;

/**
 * 支付狀態枚舉類型
 * 定義支付的各種狀態
 */
public enum PaymentStatus {
    /**
     * 待支付：尚未完成支付
     */
    PENDING,
    
    /**
     * 已支付：支付已完成
     */
    COMPLETED,
    
    /**
     * 失敗：支付失敗
     */
    FAILED,
    
    /**
     * 已退款：支付已退款
     */
    REFUNDED,
    
    /**
     * 部分退款：支付已部分退款
     */
    PARTIALLY_REFUNDED,
    
    /**
     * 已取消：支付已取消
     */
    CANCELLED
}

================
File: src/main/java/com/example/ecommerce/model/Product.java
================
package com.example.ecommerce.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Positive;
import jakarta.validation.constraints.PositiveOrZero;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;

/**
 * 商品實體類
 * 用於存儲商品的基本資訊
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "products")
public class Product {
    /**
     * 商品ID，主鍵
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * 商品名稱，不可為空
     */
    @NotBlank
    @Column(length = 100)
    private String name;

    /**
     * 商品描述，可以是長文本
     */
    @Column(columnDefinition = "TEXT")
    private String description;

    /**
     * 商品價格，必須為正數
     */
    @NotNull
    @Positive
    private BigDecimal price;

    /**
     * 商品庫存，必須為非負數
     */
    @NotNull
    @PositiveOrZero
    private Integer stock;

    /**
     * 商品分類，多對一關係
     */
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "category_id")
    private Category category;

    /**
     * 商品圖片URL
     */
    private String imageUrl;
}

================
File: src/main/java/com/example/ecommerce/model/Role.java
================
package com.example.ecommerce.model;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * 角色實體類
 * 用於定義使用者的角色和權限
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "roles")
public class Role {
    /**
     * 角色ID，主鍵
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    /**
     * 角色名稱，使用枚舉類型定義
     */
    @Enumerated(EnumType.STRING)
    @Column(length = 20)
    private ERole name;
    
    /**
     * 建構子，用於創建新角色
     */
    public Role(ERole name) {
        this.name = name;
    }
}

================
File: src/main/java/com/example/ecommerce/model/User.java
================
package com.example.ecommerce.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.HashSet;
import java.util.Set;

/**
 * 使用者實體類
 * 用於存儲會員的基本資訊
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "users",
       uniqueConstraints = {
           @UniqueConstraint(columnNames = "username"),
           @UniqueConstraint(columnNames = "email")
       })
public class User {
    /**
     * 使用者ID，主鍵
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * 使用者名稱，不可為空
     */
    @NotBlank
    @Size(max = 20)
    private String username;

    /**
     * 使用者電子郵件，不可為空且必須符合電子郵件格式
     */
    @NotBlank
    @Size(max = 50)
    @Email
    private String email;

    /**
     * 使用者密碼，不可為空且會被加密存儲
     */
    @NotBlank
    @Size(max = 120)
    private String password;
    
    /**
     * 使用者暱稱，可選
     */
    @Size(max = 50)
    private String nickname;
    
    /**
     * 使用者星座，可選
     */
    @Size(max = 20)
    private String zodiacSign;
    
    /**
     * 使用者角色，多對多關係
     */
    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "user_roles",
              joinColumns = @JoinColumn(name = "user_id"),
              inverseJoinColumns = @JoinColumn(name = "role_id"))
    private Set<Role> roles = new HashSet<>();
    
    /**
     * 建構子，用於創建新使用者
     */
    public User(String username, String email, String password) {
        this.username = username;
        this.email = email;
        this.password = password;
    }
}

================
File: src/main/java/com/example/ecommerce/repository/CartItemRepository.java
================
package com.example.ecommerce.repository;

import com.example.ecommerce.model.Cart;
import com.example.ecommerce.model.CartItem;
import com.example.ecommerce.model.Product;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

/**
 * 購物車項目儲存庫
 * 提供對購物車項目資料的基本CRUD操作
 */
@Repository
public interface CartItemRepository extends JpaRepository<CartItem, Long> {
    /**
     * 根據購物車查找所有購物車項目
     * @param cart 購物車
     * @return 該購物車中的所有項目列表
     */
    List<CartItem> findByCart(Cart cart);
    
    /**
     * 根據購物車ID查找所有購物車項目
     * @param cartId 購物車ID
     * @return 該購物車中的所有項目列表
     */
    List<CartItem> findByCartId(Long cartId);
    
    /**
     * 根據購物車和商品查找購物車項目
     * @param cart 購物車
     * @param product 商品
     * @return 包含購物車項目的Optional物件
     */
    Optional<CartItem> findByCartAndProduct(Cart cart, Product product);
    
    /**
     * 根據購物車ID和商品ID查找購物車項目
     * @param cartId 購物車ID
     * @param productId 商品ID
     * @return 包含購物車項目的Optional物件
     */
    Optional<CartItem> findByCartIdAndProductId(Long cartId, Long productId);
    
    /**
     * 刪除購物車中的所有項目
     * @param cart 購物車
     */
    void deleteByCart(Cart cart);
}

================
File: src/main/java/com/example/ecommerce/repository/CartRepository.java
================
package com.example.ecommerce.repository;

import com.example.ecommerce.model.Cart;
import com.example.ecommerce.model.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

/**
 * 購物車儲存庫
 * 提供對購物車資料的基本CRUD操作
 */
@Repository
public interface CartRepository extends JpaRepository<Cart, Long> {
    /**
     * 根據使用者查找購物車
     * @param user 使用者
     * @return 包含購物車的Optional物件
     */
    Optional<Cart> findByUser(User user);
    
    /**
     * 根據使用者ID查找購物車
     * @param userId 使用者ID
     * @return 包含購物車的Optional物件
     */
    Optional<Cart> findByUserId(Long userId);
}

================
File: src/main/java/com/example/ecommerce/repository/CategoryRepository.java
================
package com.example.ecommerce.repository;

import com.example.ecommerce.model.Category;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

/**
 * 商品分類儲存庫
 * 提供對商品分類資料的基本CRUD操作
 */
@Repository
public interface CategoryRepository extends JpaRepository<Category, Long> {
    /**
     * 根據分類名稱查找分類
     * @param name 分類名稱
     * @return 包含分類的Optional物件
     */
    Optional<Category> findByName(String name);
    
    /**
     * 檢查分類名稱是否已存在
     * @param name 分類名稱
     * @return 如果存在返回true，否則返回false
     */
    Boolean existsByName(String name);
}

================
File: src/main/java/com/example/ecommerce/repository/OrderItemRepository.java
================
package com.example.ecommerce.repository;

import com.example.ecommerce.model.Order;
import com.example.ecommerce.model.OrderItem;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

/**
 * 訂單項目儲存庫
 * 提供對訂單項目資料的基本CRUD操作
 */
@Repository
public interface OrderItemRepository extends JpaRepository<OrderItem, Long> {
    /**
     * 根據訂單查找所有訂單項目
     * @param order 訂單
     * @return 該訂單的所有項目列表
     */
    List<OrderItem> findByOrder(Order order);
    
    /**
     * 根據訂單ID查找所有訂單項目
     * @param orderId 訂單ID
     * @return 該訂單的所有項目列表
     */
    List<OrderItem> findByOrderId(Long orderId);
    
    /**
     * 根據商品ID查找所有包含該商品的訂單項目
     * @param productId 商品ID
     * @return 包含該商品的所有訂單項目列表
     */
    List<OrderItem> findByProductId(Long productId);
}

================
File: src/main/java/com/example/ecommerce/repository/OrderRepository.java
================
package com.example.ecommerce.repository;

import com.example.ecommerce.model.Order;
import com.example.ecommerce.model.OrderStatus;
import com.example.ecommerce.model.User;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * 訂單儲存庫
 * 提供對訂單資料的基本CRUD操作和進階查詢功能
 */
@Repository
public interface OrderRepository extends JpaRepository<Order, Long> {
    /**
     * 根據訂單編號查找訂單
     * @param orderNumber 訂單編號
     * @return 包含訂單的Optional物件
     */
    Optional<Order> findByOrderNumber(String orderNumber);
    
    /**
     * 根據使用者查找所有訂單
     * @param user 使用者
     * @return 該使用者的所有訂單列表
     */
    List<Order> findByUser(User user);
    
    /**
     * 根據使用者分頁查找訂單
     * @param user 使用者
     * @param pageable 分頁參數
     * @return 該使用者的訂單分頁結果
     */
    Page<Order> findByUser(User user, Pageable pageable);
    
    /**
     * 根據使用者ID查找所有訂單
     * @param userId 使用者ID
     * @return 該使用者的所有訂單列表
     */
    List<Order> findByUserId(Long userId);
    
    /**
     * 根據使用者ID分頁查找訂單
     * @param userId 使用者ID
     * @param pageable 分頁參數
     * @return 該使用者的訂單分頁結果
     */
    Page<Order> findByUserId(Long userId, Pageable pageable);
    
    /**
     * 根據訂單狀態查找訂單
     * @param status 訂單狀態
     * @param pageable 分頁參數
     * @return 符合狀態的訂單分頁結果
     */
    Page<Order> findByStatus(OrderStatus status, Pageable pageable);
    
    /**
     * 根據使用者和訂單狀態查找訂單
     * @param user 使用者
     * @param status 訂單狀態
     * @return 該使用者符合狀態的訂單列表
     */
    List<Order> findByUserAndStatus(User user, OrderStatus status);
    
    /**
     * 根據訂單創建時間範圍查找訂單
     * @param startDate 開始時間
     * @param endDate 結束時間
     * @param pageable 分頁參數
     * @return 符合時間範圍的訂單分頁結果
     */
    Page<Order> findByOrderDateBetween(LocalDateTime startDate, LocalDateTime endDate, Pageable pageable);
}

================
File: src/main/java/com/example/ecommerce/repository/PaymentRepository.java
================
package com.example.ecommerce.repository;

import com.example.ecommerce.model.Order;
import com.example.ecommerce.model.Payment;
import com.example.ecommerce.model.PaymentMethod;
import com.example.ecommerce.model.PaymentStatus;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * 支付記錄儲存庫
 * 提供對支付記錄資料的基本CRUD操作和進階查詢功能
 */
@Repository
public interface PaymentRepository extends JpaRepository<Payment, Long> {
    /**
     * 根據支付編號查找支付記錄
     * @param paymentNumber 支付編號
     * @return 包含支付記錄的Optional物件
     */
    Optional<Payment> findByPaymentNumber(String paymentNumber);
    
    /**
     * 根據訂單查找支付記錄
     * @param order 訂單
     * @return 包含支付記錄的Optional物件
     */
    Optional<Payment> findByOrder(Order order);
    
    /**
     * 根據訂單ID查找支付記錄
     * @param orderId 訂單ID
     * @return 包含支付記錄的Optional物件
     */
    Optional<Payment> findByOrderId(Long orderId);
    
    /**
     * 根據支付狀態查找支付記錄
     * @param status 支付狀態
     * @param pageable 分頁參數
     * @return 符合狀態的支付記錄分頁結果
     */
    Page<Payment> findByStatus(PaymentStatus status, Pageable pageable);
    
    /**
     * 根據支付方式查找支付記錄
     * @param paymentMethod 支付方式
     * @param pageable 分頁參數
     * @return 符合支付方式的支付記錄分頁結果
     */
    Page<Payment> findByPaymentMethod(PaymentMethod paymentMethod, Pageable pageable);
    
    /**
     * 根據支付時間範圍查找支付記錄
     * @param startTime 開始時間
     * @param endTime 結束時間
     * @param pageable 分頁參數
     * @return 符合時間範圍的支付記錄分頁結果
     */
    Page<Payment> findByPaymentTimeBetween(LocalDateTime startTime, LocalDateTime endTime, Pageable pageable);
    
    /**
     * 根據第三方交易編號查找支付記錄
     * @param transactionId 第三方交易編號
     * @return 包含支付記錄的Optional物件
     */
    Optional<Payment> findByTransactionId(String transactionId);
}

================
File: src/main/java/com/example/ecommerce/repository/ProductRepository.java
================
package com.example.ecommerce.repository;

import com.example.ecommerce.model.Category;
import com.example.ecommerce.model.Product;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

/**
 * 商品儲存庫
 * 提供對商品資料的基本CRUD操作和進階查詢功能
 */
@Repository
public interface ProductRepository extends JpaRepository<Product, Long> {
    /**
     * 根據分類查找商品
     * @param category 商品分類
     * @return 該分類下的所有商品列表
     */
    List<Product> findByCategory(Category category);
    
    /**
     * 根據分類分頁查找商品
     * @param category 商品分類
     * @param pageable 分頁參數
     * @return 該分類下的商品分頁結果
     */
    Page<Product> findByCategory(Category category, Pageable pageable);
    
    /**
     * 根據商品名稱模糊查詢商品
     * @param name 商品名稱關鍵字
     * @param pageable 分頁參數
     * @return 符合條件的商品分頁結果
     */
    Page<Product> findByNameContaining(String name, Pageable pageable);
    
    /**
     * 根據商品名稱或描述模糊查詢商品
     * @param keyword 關鍵字
     * @param pageable 分頁參數
     * @return 符合條件的商品分頁結果
     */
    @Query("SELECT p FROM Product p WHERE p.name LIKE %:keyword% OR p.description LIKE %:keyword%")
    Page<Product> searchByKeyword(@Param("keyword") String keyword, Pageable pageable);
    
    /**
     * 根據分類和關鍵字查詢商品
     * @param category 商品分類
     * @param keyword 關鍵字
     * @param pageable 分頁參數
     * @return 符合條件的商品分頁結果
     */
    @Query("SELECT p FROM Product p WHERE p.category = :category AND (p.name LIKE %:keyword% OR p.description LIKE %:keyword%)")
    Page<Product> searchByCategoryAndKeyword(@Param("category") Category category, @Param("keyword") String keyword, Pageable pageable);
}

================
File: src/main/java/com/example/ecommerce/repository/RoleRepository.java
================
package com.example.ecommerce.repository;

import com.example.ecommerce.model.ERole;
import com.example.ecommerce.model.Role;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

/**
 * 角色儲存庫
 * 提供對角色資料的基本CRUD操作
 */
@Repository
public interface RoleRepository extends JpaRepository<Role, Integer> {
    /**
     * 根據角色名稱查找角色
     * @param name 角色名稱
     * @return 包含角色的Optional物件
     */
    Optional<Role> findByName(ERole name);
}

================
File: src/main/java/com/example/ecommerce/repository/UserRepository.java
================
package com.example.ecommerce.repository;

import com.example.ecommerce.model.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

/**
 * 使用者儲存庫
 * 提供對使用者資料的基本CRUD操作
 */
@Repository
public interface UserRepository extends JpaRepository<User, Long> {
    /**
     * 根據使用者名稱查找使用者
     * @param username 使用者名稱
     * @return 包含使用者的Optional物件
     */
    Optional<User> findByUsername(String username);
    
    /**
     * 根據電子郵件查找使用者
     * @param email 電子郵件
     * @return 包含使用者的Optional物件
     */
    Optional<User> findByEmail(String email);
    
    /**
     * 檢查使用者名稱是否已存在
     * @param username 使用者名稱
     * @return 如果存在返回true，否則返回false
     */
    Boolean existsByUsername(String username);
    
    /**
     * 檢查電子郵件是否已存在
     * @param email 電子郵件
     * @return 如果存在返回true，否則返回false
     */
    Boolean existsByEmail(String email);
}

================
File: src/main/java/com/example/ecommerce/security/jwt/AuthEntryPointJwt.java
================
package com.example.ecommerce.security.jwt;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.stereotype.Component;

import java.io.IOException;

/**
 * JWT身份驗證異常處理器
 * 用於處理未經身份驗證的用戶訪問受保護資源時的異常
 */
@Component
public class AuthEntryPointJwt implements AuthenticationEntryPoint {
    private static final Logger logger = LoggerFactory.getLogger(AuthEntryPointJwt.class);

    /**
     * 當未經身份驗證的用戶嘗試訪問受保護資源時，返回401 Unauthorized錯誤
     */
    @Override
    public void commence(HttpServletRequest request, HttpServletResponse response,
                         AuthenticationException authException) throws IOException, ServletException {
        logger.error("Unauthorized error: {}", authException.getMessage());
        
        // 設置HTTP狀態碼為401 Unauthorized
        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
        
        // 設置回應內容類型為JSON
        response.setContentType("application/json");
        
        // 返回錯誤訊息，使用英文避免編碼問題
        response.getWriter().write("{\"error\":\"Unauthorized\",\"message\":\"" + authException.getMessage() + "\"}");
    }
}

================
File: src/main/java/com/example/ecommerce/security/jwt/AuthTokenFilter.java
================
package com.example.ecommerce.security.jwt;

import com.example.ecommerce.security.services.UserDetailsServiceImpl;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

/**
 * JWT身份驗證過濾器
 * 用於攔截HTTP請求，提取並驗證JWT令牌，並設置Spring Security的身份驗證上下文
 */
public class AuthTokenFilter extends OncePerRequestFilter {
    @Autowired
    private JwtUtils jwtUtils;

    @Autowired
    private UserDetailsServiceImpl userDetailsService;

    private static final Logger logger = LoggerFactory.getLogger(AuthTokenFilter.class);

    /**
     * 過濾HTTP請求，提取並驗證JWT令牌
     */
    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        try {
            // 從請求中提取JWT令牌
            String jwt = parseJwt(request);
            
            // 輸出調試信息
            logger.debug("JWT Token: {}", jwt);
            
            // 如果令牌存在且有效，則設置身份驗證上下文
            if (jwt != null && jwtUtils.validateJwtToken(jwt)) {
                // 從JWT令牌中獲取用戶名
                String username = jwtUtils.getUserNameFromJwtToken(jwt);
                logger.debug("Username from token: {}", username);

                // 根據用戶名加載用戶詳細信息
                UserDetails userDetails = userDetailsService.loadUserByUsername(username);
                
                // 創建身份驗證令牌
                UsernamePasswordAuthenticationToken authentication =
                        new UsernamePasswordAuthenticationToken(
                                userDetails,
                                null,
                                userDetails.getAuthorities());
                
                // 設置身份驗證詳細信息
                authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));

                // 設置Spring Security的身份驗證上下文
                SecurityContextHolder.getContext().setAuthentication(authentication);
                logger.debug("Authentication set for user: {}", username);
            } else if (jwt != null) {
                logger.warn("Invalid JWT token: {}", jwt);
            }
        } catch (Exception e) {
            logger.error("Cannot set user authentication: {}", e.getMessage());
        }

        // 繼續過濾鏈
        filterChain.doFilter(request, response);
    }

    /**
     * 從HTTP請求的Authorization頭部提取JWT令牌
     * @param request HTTP請求
     * @return JWT令牌字符串，如果不存在則返回null
     */
    private String parseJwt(HttpServletRequest request) {
        // 從Authorization頭部獲取JWT令牌
        String headerAuth = request.getHeader("Authorization");
        logger.debug("Authorization header: {}", headerAuth);

        // 如果頭部存在且以"Bearer "開頭，則提取實際的令牌部分
        if (StringUtils.hasText(headerAuth) && headerAuth.startsWith("Bearer ")) {
            return headerAuth.substring(7);
        }

        return null;
    }
}

================
File: src/main/java/com/example/ecommerce/security/jwt/JwtUtils.java
================
package com.example.ecommerce.security.jwt;

import com.example.ecommerce.security.services.UserDetailsImpl;
import io.jsonwebtoken.*;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Component;

import java.security.Key;
import java.util.Date;

/**
 * JWT工具類
 * 用於生成、解析和驗證JWT令牌
 */
@Component
public class JwtUtils {
    private static final Logger logger = LoggerFactory.getLogger(JwtUtils.class);

    /**
     * JWT密鑰，從配置文件中讀取
     */
    @Value("${jwt.secret}")
    private String jwtSecret;

    /**
     * JWT過期時間（毫秒），從配置文件中讀取
     */
    @Value("${jwt.expiration}")
    private int jwtExpirationMs;

    /**
     * 根據用戶認證信息生成JWT令牌
     * @param authentication 用戶認證信息
     * @return JWT令牌字符串
     */
    public String generateJwtToken(Authentication authentication) {
        UserDetailsImpl userPrincipal = (UserDetailsImpl) authentication.getPrincipal();
        
        logger.debug("Generating JWT token for user: {}", userPrincipal.getUsername());
        logger.debug("Using JWT secret: {}", jwtSecret);

        return Jwts.builder()
                .setSubject((userPrincipal.getUsername()))
                .setIssuedAt(new Date())
                .setExpiration(new Date((new Date()).getTime() + jwtExpirationMs))
                .signWith(key(), SignatureAlgorithm.HS256)
                .compact();
    }

    /**
     * 從JWT密鑰字符串生成密鑰對象
     * @return 密鑰對象
     */
    private Key key() {
        try {
            byte[] keyBytes = Decoders.BASE64.decode(jwtSecret);
            return Keys.hmacShaKeyFor(keyBytes);
        } catch (Exception e) {
            logger.error("Failed to decode JWT secret: {}", e.getMessage());
            throw new RuntimeException("Invalid JWT secret key", e);
        }
    }

    /**
     * 從JWT令牌中獲取用戶名
     * @param token JWT令牌
     * @return 用戶名
     */
    public String getUserNameFromJwtToken(String token) {
        try {
            String username = Jwts.parserBuilder().setSigningKey(key()).build()
                    .parseClaimsJws(token).getBody().getSubject();
            logger.debug("Extracted username from token: {}", username);
            return username;
        } catch (Exception e) {
            logger.error("Failed to extract username from token: {}", e.getMessage());
            return null;
        }
    }

    /**
     * 驗證JWT令牌是否有效
     * @param authToken JWT令牌
     * @return 如果有效返回true，否則返回false
     */
    public boolean validateJwtToken(String authToken) {
        try {
            Jwts.parserBuilder().setSigningKey(key()).build().parse(authToken);
            logger.debug("JWT token validated successfully");
            return true;
        } catch (MalformedJwtException e) {
            logger.error("Invalid JWT token: {}", e.getMessage());
        } catch (ExpiredJwtException e) {
            logger.error("JWT token is expired: {}", e.getMessage());
        } catch (UnsupportedJwtException e) {
            logger.error("JWT token is unsupported: {}", e.getMessage());
        } catch (IllegalArgumentException e) {
            logger.error("JWT claims string is empty: {}", e.getMessage());
        } catch (Exception e) {
            logger.error("JWT validation error: {}", e.getMessage());
        }

        return false;
    }
}

================
File: src/main/java/com/example/ecommerce/security/services/UserDetailsImpl.java
================
package com.example.ecommerce.security.services;

import com.example.ecommerce.model.User;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * 用戶詳細信息實現類
 * 實現Spring Security的UserDetails接口，用於表示已認證的用戶
 */
public class UserDetailsImpl implements UserDetails {
    private static final long serialVersionUID = 1L;

    /**
     * 用戶ID
     */
    private Long id;

    /**
     * 用戶名
     */
    private String username;

    /**
     * 電子郵件
     */
    private String email;

    /**
     * 密碼（在JSON序列化時忽略）
     */
    @JsonIgnore
    private String password;

    /**
     * 用戶權限集合
     */
    private Collection<? extends GrantedAuthority> authorities;

    /**
     * 構造函數
     */
    public UserDetailsImpl(Long id, String username, String email, String password,
                           Collection<? extends GrantedAuthority> authorities) {
        this.id = id;
        this.username = username;
        this.email = email;
        this.password = password;
        this.authorities = authorities;
    }

    /**
     * 從User實體構建UserDetailsImpl對象
     * @param user User實體
     * @return UserDetailsImpl對象
     */
    public static UserDetailsImpl build(User user) {
        // 將用戶角色轉換為GrantedAuthority對象
        List<GrantedAuthority> authorities = user.getRoles().stream()
                .map(role -> new SimpleGrantedAuthority(role.getName().name()))
                .collect(Collectors.toList());

        // 創建並返回UserDetailsImpl對象
        return new UserDetailsImpl(
                user.getId(),
                user.getUsername(),
                user.getEmail(),
                user.getPassword(),
                authorities);
    }

    /**
     * 獲取用戶權限集合
     */
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return authorities;
    }

    /**
     * 獲取用戶ID
     */
    public Long getId() {
        return id;
    }

    /**
     * 獲取用戶電子郵件
     */
    public String getEmail() {
        return email;
    }

    /**
     * 獲取用戶密碼
     */
    @Override
    public String getPassword() {
        return password;
    }

    /**
     * 獲取用戶名
     */
    @Override
    public String getUsername() {
        return username;
    }

    /**
     * 判斷賬號是否未過期
     */
    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    /**
     * 判斷賬號是否未鎖定
     */
    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    /**
     * 判斷憑證是否未過期
     */
    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    /**
     * 判斷賬號是否啟用
     */
    @Override
    public boolean isEnabled() {
        return true;
    }

    /**
     * 判斷兩個用戶是否相等
     */
    @Override
    public boolean equals(Object o) {
        if (this == o)
            return true;
        if (o == null || getClass() != o.getClass())
            return false;
        UserDetailsImpl user = (UserDetailsImpl) o;
        return Objects.equals(id, user.id);
    }
}

================
File: src/main/java/com/example/ecommerce/security/services/UserDetailsServiceImpl.java
================
package com.example.ecommerce.security.services;

import com.example.ecommerce.model.User;
import com.example.ecommerce.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * 用戶詳細信息服務
 * 實現Spring Security的UserDetailsService接口，用於加載用戶信息
 */
@Service
public class UserDetailsServiceImpl implements UserDetailsService {
    @Autowired
    UserRepository userRepository;

    /**
     * 根據用戶名加載用戶詳細信息
     * @param username 用戶名
     * @return 用戶詳細信息
     * @throws UsernameNotFoundException 如果用戶不存在則拋出此異常
     */
    @Override
    @Transactional
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        // 從數據庫中查找用戶
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("找不到用戶名為: " + username + " 的用戶"));

        // 構建並返回UserDetailsImpl對象
        return UserDetailsImpl.build(user);
    }
}

================
File: src/main/java/com/example/ecommerce/security/WebSecurityConfig.java
================
package com.example.ecommerce.security;

import com.example.ecommerce.security.jwt.AuthEntryPointJwt;
import com.example.ecommerce.security.jwt.AuthTokenFilter;
import com.example.ecommerce.security.services.UserDetailsServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.Arrays;

/**
 * Spring Security配置類
 * 用於配置安全策略、身份驗證和授權機制
 */
@Configuration
@EnableWebSecurity
@EnableMethodSecurity
public class WebSecurityConfig {
    @Autowired
    UserDetailsServiceImpl userDetailsService;

    @Autowired
    private AuthEntryPointJwt unauthorizedHandler;

    /**
     * 創建JWT身份驗證過濾器
     * @return JWT身份驗證過濾器
     */
    @Bean
    public AuthTokenFilter authenticationJwtTokenFilter() {
        return new AuthTokenFilter();
    }

    /**
     * 創建DAO身份驗證提供者
     * @return DAO身份驗證提供者
     */
    @Bean
    public DaoAuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
        
        // 設置用戶詳細信息服務
        authProvider.setUserDetailsService(userDetailsService);
        // 設置密碼編碼器
        authProvider.setPasswordEncoder(passwordEncoder());
        
        return authProvider;
    }

    /**
     * 創建身份驗證管理器
     * @param authConfig 身份驗證配置
     * @return 身份驗證管理器
     * @throws Exception 如果創建身份驗證管理器時發生錯誤
     */
    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {
        return authConfig.getAuthenticationManager();
    }

    /**
     * 創建密碼編碼器
     * @return 密碼編碼器
     */
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    /**
     * 配置CORS
     * @return CORS配置源
     */
    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOrigins(Arrays.asList("*"));
        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"));
        configuration.setAllowedHeaders(Arrays.asList("authorization", "content-type", "x-auth-token"));
        configuration.setExposedHeaders(Arrays.asList("x-auth-token"));
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }

    /**
     * 配置安全過濾鏈
     * @param http HTTP安全配置
     * @return 安全過濾鏈
     * @throws Exception 如果配置安全過濾鏈時發生錯誤
     */
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            // 啟用CORS
            .cors(cors -> cors.configurationSource(corsConfigurationSource()))
            // 禁用CSRF保護
            .csrf(AbstractHttpConfigurer::disable)
            // 配置異常處理
            .exceptionHandling(exception -> exception.authenticationEntryPoint(unauthorizedHandler))
            // 配置會話管理
            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            // 配置請求授權
            .authorizeHttpRequests(auth -> 
                auth
                    // 允許所有人訪問身份驗證相關的API
                    .requestMatchers("/api/auth/**").permitAll()
                    // 允許所有人訪問公共API
                    .requestMatchers("/api/public/**").permitAll()
                    // 允許所有人訪問API文檔
                    .requestMatchers("/v3/api-docs/**").permitAll()
                    .requestMatchers("/swagger-ui/**").permitAll()
                    .requestMatchers("/swagger-ui.html").permitAll()
                    .requestMatchers("/api-docs/**").permitAll()
                    // 其他所有請求需要身份驗證
                    .anyRequest().authenticated()
            );
        
        // 設置身份驗證提供者
        http.authenticationProvider(authenticationProvider());

        // 添加JWT身份驗證過濾器
        http.addFilterBefore(authenticationJwtTokenFilter(), UsernamePasswordAuthenticationFilter.class);
        
        return http.build();
    }
}

================
File: src/main/java/com/example/ecommerce/service/CartService.java
================
package com.example.ecommerce.service;

import com.example.ecommerce.model.Cart;
import com.example.ecommerce.model.CartItem;
import com.example.ecommerce.model.Product;
import com.example.ecommerce.model.User;
import com.example.ecommerce.repository.CartItemRepository;
import com.example.ecommerce.repository.CartRepository;
import com.example.ecommerce.repository.ProductRepository;
import com.example.ecommerce.repository.UserRepository;
import com.example.ecommerce.security.services.UserDetailsImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

/**
 * 購物車服務
 * 處理購物車相關的業務邏輯
 */
@Service
public class CartService {

    @Autowired
    private CartRepository cartRepository;

    @Autowired
    private CartItemRepository cartItemRepository;

    @Autowired
    private ProductRepository productRepository;

    @Autowired
    private UserRepository userRepository;

    /**
     * 獲取當前用戶的購物車
     * @return 購物車對象
     */
    public Cart getCart() {
        User user = getCurrentUser();
        if (user == null) {
            return null;
        }

        // 查找用戶的購物車，如果不存在則創建一個新的購物車
        Optional<Cart> cartOptional = cartRepository.findByUser(user);
        Cart cart;
        if (cartOptional.isPresent()) {
            cart = cartOptional.get();
        } else {
            cart = new Cart();
            cart.setUser(user);
            cart = cartRepository.save(cart);
        }

        return cart;
    }

    /**
     * 獲取購物車中的商品數量
     * @return 購物車中的商品數量
     */
    public Integer getCartItemCount() {
        Cart cart = getCart();
        if (cart == null) {
            return 0;
        }

        List<CartItem> cartItems = cartItemRepository.findByCart(cart);
        if (cartItems.isEmpty()) {
            return 0;
        }

        return cartItems.size();
    }

    /**
     * 添加商品到購物車
     * @param productId 商品ID
     * @param quantity 數量
     * @return 更新後的購物車
     */
    @Transactional
    public Cart addItemToCart(Long productId, Integer quantity) {
        // 獲取當前用戶的購物車
        Cart cart = getCart();
        if (cart == null) {
            throw new RuntimeException("用戶未登入");
        }

        // 查找商品
        Product product = productRepository.findById(productId)
                .orElseThrow(() -> new RuntimeException("商品不存在"));

        // 檢查商品庫存
        if (product.getStock() < quantity) {
            throw new RuntimeException("商品庫存不足");
        }

        // 查找購物車中是否已存在該商品
        Optional<CartItem> existingItemOptional = cartItemRepository.findByCartAndProduct(cart, product);

        if (existingItemOptional.isPresent()) {
            // 如果購物車中已存在該商品，則更新數量
            CartItem existingItem = existingItemOptional.get();
            existingItem.setQuantity(existingItem.getQuantity() + quantity);
            cartItemRepository.save(existingItem);
        } else {
            // 如果購物車中不存在該商品，則添加新的購物車項目
            CartItem newItem = new CartItem();
            newItem.setCart(cart);
            newItem.setProduct(product);
            newItem.setQuantity(quantity);
            cartItemRepository.save(newItem);
        }

        return cart;
    }

    /**
     * 更新購物車中商品的數量
     * @param itemId 購物車項目ID
     * @param quantity 新數量
     * @return 更新後的購物車
     */
    @Transactional
    public Cart updateCartItemQuantity(Long itemId, Integer quantity) {
        // 獲取當前用戶的購物車
        Cart cart = getCart();
        if (cart == null) {
            throw new RuntimeException("用戶未登入");
        }

        // 查找購物車項目
        CartItem cartItem = cartItemRepository.findById(itemId)
                .orElseThrow(() -> new RuntimeException("購物車項目不存在"));

        // 檢查該購物車項目是否屬於當前用戶的購物車
        if (!cartItem.getCart().getId().equals(cart.getId())) {
            throw new RuntimeException("無權操作此購物車項目");
        }

        // 檢查商品庫存
        if (cartItem.getProduct().getStock() < quantity) {
            throw new RuntimeException("商品庫存不足");
        }

        // 更新數量
        cartItem.setQuantity(quantity);
        cartItemRepository.save(cartItem);

        return cart;
    }

    /**
     * 從購物車中移除商品
     * @param itemId 購物車項目ID
     * @return 更新後的購物車
     */
    @Transactional
    public Cart removeCartItem(Long itemId) {
        // 獲取當前用戶的購物車
        Cart cart = getCart();
        if (cart == null) {
            throw new RuntimeException("用戶未登入");
        }

        // 查找購物車項目
        CartItem cartItem = cartItemRepository.findById(itemId)
                .orElseThrow(() -> new RuntimeException("購物車項目不存在"));

        // 檢查該購物車項目是否屬於當前用戶的購物車
        if (!cartItem.getCart().getId().equals(cart.getId())) {
            throw new RuntimeException("無權操作此購物車項目");
        }

        // 刪除購物車項目
        cartItemRepository.delete(cartItem);

        return cart;
    }

    /**
     * 清空購物車
     * @return 清空後的購物車
     */
    @Transactional
    public Cart clearCart() {
        // 獲取當前用戶的購物車
        Cart cart = getCart();
        if (cart == null) {
            throw new RuntimeException("用戶未登入");
        }

        // 刪除購物車中的所有項目
        cartItemRepository.deleteByCart(cart);

        return cart;
    }

    /**
     * 獲取當前登入的用戶
     * @return 當前用戶
     */
    private User getCurrentUser() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication == null || !authentication.isAuthenticated() || 
            authentication.getPrincipal().equals("anonymousUser")) {
            return null;
        }

        UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
        return userRepository.findById(userDetails.getId())
                .orElseThrow(() -> new RuntimeException("用戶不存在"));
    }
}

================
File: src/main/java/com/example/ecommerce/util/PasswordEncryptor.java
================
package com.example.ecommerce.util;

import org.jasypt.encryption.pbe.PooledPBEStringEncryptor;
import org.jasypt.encryption.pbe.config.SimpleStringPBEConfig;

public class PasswordEncryptor {
    public static void main(String[] args) {
        // 替換為您的實際資料庫密碼
        String actualDbPassword = "123456";
        
        // 替換為您的實際 JWT 密鑰
        String actualJwtSecret = "123456";
        
        // 替換為您的 Jasypt 主密碼
        String jasyptPassword = "123456";
        
        PooledPBEStringEncryptor encryptor = new PooledPBEStringEncryptor();
        SimpleStringPBEConfig config = new SimpleStringPBEConfig();
        
        config.setPassword(jasyptPassword);
        config.setAlgorithm("PBEWithMD5AndDES");
        config.setKeyObtentionIterations("1000");
        config.setPoolSize("1");
        config.setProviderName("SunJCE");
        config.setSaltGeneratorClassName("org.jasypt.salt.RandomSaltGenerator");
        config.setIvGeneratorClassName("org.jasypt.iv.NoIvGenerator");
        config.setStringOutputType("base64");
        
        encryptor.setConfig(config);
        String encryptedDbPassword = encryptor.encrypt(actualDbPassword);
        String encryptedJwtSecret = encryptor.encrypt(actualJwtSecret);
        System.out.println("加密後的資料庫密碼: " + encryptedDbPassword);
        System.out.println("加密後的JWT密鑰: " + encryptedJwtSecret);
        
        // 資料庫配置
        System.out.println("spring.datasource.password=ENC(" + encryptedDbPassword + ")");
        
        // JWT配置
        System.out.println("jwt.secret=ENC(" + encryptedJwtSecret + ")");
    }
}

================
File: src/main/resources/application.properties
================
# 數據庫配置
spring.datasource.url=jdbc:mysql://localhost:3306/ecommerce?useSSL=false&serverTimezone=UTC&createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true
spring.datasource.username=root
spring.datasource.password=rootpassword

# JPA 配置
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# JWT 配置
jwt.secret=c2VjcmV0LWtleS1mb3ItZGV2ZWxvcG1lbnQtZW52aXJvbm1lbnQtc2hvdWxkLWJlLWNoYW5nZWQtaW4tcHJvZHVjdGlvbg==
jwt.expiration=86400000

# 日誌配置
logging.level.org.springframework.security=DEBUG
logging.level.com.example.ecommerce.security=DEBUG
logging.level.com.example.ecommerce.security.jwt=DEBUG

# Swagger 配置
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operationsSorter=method

# Jasypt 加密配置
jasypt.encryptor.algorithm=PBEWithMD5AndDES
jasypt.encryptor.iv-generator-classname=org.jasypt.iv.NoIvGenerator

================
File: src/main/resources/templates/error/403.html
================
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>禁止訪問</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            padding-top: 50px;
            background-color: #f8f9fa;
        }
        .error-container {
            max-width: 600px;
            margin: 0 auto;
            padding: 30px;
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            text-align: center;
        }
        .error-code {
            font-size: 72px;
            font-weight: bold;
            color: #ffc107;
        }
        .error-message {
            margin: 20px 0;
            color: #6c757d;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="error-container">
            <div class="error-code">403</div>
            <h1>禁止訪問</h1>
            <div class="error-message">
                您沒有權限訪問此頁面。
            </div>
            <p>如果您認為這是一個錯誤，請聯繫系統管理員或登入後再試。</p>
            <div class="mt-3">
                <a href="/" class="btn btn-primary me-2">返回首頁</a>
                <a href="/login" class="btn btn-outline-secondary">登入</a>
            </div>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

================
File: src/main/resources/templates/error/404.html
================
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>頁面未找到</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            padding-top: 50px;
            background-color: #f8f9fa;
        }
        .error-container {
            max-width: 600px;
            margin: 0 auto;
            padding: 30px;
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            text-align: center;
        }
        .error-code {
            font-size: 72px;
            font-weight: bold;
            color: #17a2b8;
        }
        .error-message {
            margin: 20px 0;
            color: #6c757d;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="error-container">
            <div class="error-code">404</div>
            <h1>頁面未找到</h1>
            <div class="error-message">
                您嘗試訪問的頁面不存在或已被移除。
            </div>
            <p>請檢查您輸入的URL是否正確，或使用下面的按鈕返回首頁。</p>
            <a href="/" class="btn btn-primary mt-3">返回首頁</a>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

================
File: src/main/resources/templates/error/500.html
================
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>伺服器錯誤</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            padding-top: 50px;
            background-color: #f8f9fa;
        }
        .error-container {
            max-width: 600px;
            margin: 0 auto;
            padding: 30px;
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            text-align: center;
        }
        .error-code {
            font-size: 72px;
            font-weight: bold;
            color: #dc3545;
        }
        .error-message {
            margin: 20px 0;
            color: #6c757d;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="error-container">
            <div class="error-code">500</div>
            <h1>伺服器內部錯誤</h1>
            <div class="error-message">
                系統處理您的請求時發生錯誤。
            </div>
            <p>我們已記錄此問題，並正在努力修復。請稍後再試。</p>
            <a href="/" class="btn btn-primary mt-3">返回首頁</a>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

================
File: src/main/resources/templates/error/error.html
================
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>系統錯誤</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            padding-top: 50px;
            background-color: #f8f9fa;
        }
        .error-container {
            max-width: 600px;
            margin: 0 auto;
            padding: 30px;
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            text-align: center;
        }
        .error-code {
            font-size: 72px;
            font-weight: bold;
            color: #dc3545;
        }
        .error-message {
            margin: 20px 0;
            color: #6c757d;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="error-container">
            <div class="error-code" th:text="${statusCode ?: '錯誤'}">錯誤</div>
            <h1>系統發生錯誤</h1>
            <div class="error-message" th:text="${errorMessage ?: '發生未知錯誤，請稍後再試。'}">
                發生未知錯誤，請稍後再試。
            </div>
            <p>如果問題持續存在，請聯繫系統管理員。</p>
            <a href="/" class="btn btn-primary mt-3">返回首頁</a>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

================
File: src/main/resources/templates/forgot-password.html
================
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"
      th:replace="~{layout/default :: html(~{::title}, ~{::main}, ~{::link}, ~{::script})}">
<head>
    <title>忘記密碼 - 電商系統</title>
    <link rel="stylesheet" href=""> <!-- 額外的CSS -->
</head>
<body>
    <main>
        <div class="row justify-content-center">
            <div class="col-md-6 col-lg-5">
                <div class="card shadow">
                    <div class="card-header bg-primary text-white text-center py-3">
                        <h4 class="mb-0"><i class="bi bi-key"></i> 忘記密碼</h4>
                    </div>
                    <div class="card-body p-4">
                        <!-- 忘記密碼表單 -->
                        <form id="forgotPasswordForm" method="post">
                            <!-- 成功訊息 -->
                            <div id="successMessage" class="alert alert-success d-none" role="alert">
                                <i class="bi bi-check-circle-fill"></i> <span id="successText">重置密碼郵件已發送，請檢查您的郵箱。</span>
                            </div>
                            
                            <!-- 錯誤訊息 -->
                            <div id="errorMessage" class="alert alert-danger d-none" role="alert">
                                <i class="bi bi-exclamation-triangle-fill"></i> <span id="errorText">發送重置密碼郵件失敗，請稍後再試。</span>
                            </div>
                            
                            <p class="mb-3">請輸入您註冊時使用的電子郵件地址，我們將向您發送重置密碼的郵件。</p>
                            
                            <!-- 電子郵件 -->
                            <div class="mb-3">
                                <label for="email" class="form-label">電子郵件</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-envelope"></i></span>
                                    <input type="email" class="form-control" id="email" name="email" 
                                           placeholder="請輸入您的電子郵件地址" required autofocus>
                                </div>
                            </div>
                            
                            <!-- 提交按鈕 -->
                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary">
                                    <i class="bi bi-send"></i> 發送重置郵件
                                </button>
                            </div>
                        </form>
                        
                        <!-- 其他選項 -->
                        <div class="mt-3 text-center">
                            <p class="mb-0">
                                記起密碼了？ <a th:href="@{/login}" class="text-decoration-none">返回登入</a>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // 表單提交前的處理
            const forgotPasswordForm = document.getElementById('forgotPasswordForm');
            const successMessage = document.getElementById('successMessage');
            const errorMessage = document.getElementById('errorMessage');
            const successText = document.getElementById('successText');
            const errorText = document.getElementById('errorText');
            
            forgotPasswordForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                // 獲取表單數據
                const email = document.getElementById('email').value;
                
                // 發送忘記密碼請求
                fetch('/api/auth/forgot-password', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ email: email })
                })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(data => {
                            throw new Error(data.message || '發送重置密碼郵件失敗');
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    // 顯示成功訊息
                    successText.textContent = data.message || '重置密碼郵件已發送，請檢查您的郵箱。';
                    successMessage.classList.remove('d-none');
                    errorMessage.classList.add('d-none');
                    
                    // 清空表單
                    forgotPasswordForm.reset();
                })
                .catch(error => {
                    console.error('Error:', error);
                    // 顯示錯誤訊息
                    errorText.textContent = error.message;
                    errorMessage.classList.remove('d-none');
                    successMessage.classList.add('d-none');
                });
            });
        });
    </script>
</body>
</html>

================
File: src/main/resources/templates/index.html
================
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"
      th:replace="~{layout/default :: html(~{::title}, ~{::main}, ~{::link}, ~{::script})}">
<head>
    <title>首頁 - 電商系統</title>
    <link rel="stylesheet" href=""> <!-- 額外的CSS -->
</head>
<body>
    <main>
        <!-- 輪播圖 -->
        <div id="homeCarousel" class="carousel slide mb-4" data-bs-ride="carousel">
            <div class="carousel-indicators">
                <button type="button" data-bs-target="#homeCarousel" data-bs-slide-to="0" class="active"></button>
                <button type="button" data-bs-target="#homeCarousel" data-bs-slide-to="1"></button>
                <button type="button" data-bs-target="#homeCarousel" data-bs-slide-to="2"></button>
            </div>
            <div class="carousel-inner rounded shadow">
                <div class="carousel-item active">
                    <img src="https://via.placeholder.com/1200x400?text=促銷活動1" class="d-block w-100" alt="促銷活動1">
                    <div class="carousel-caption d-none d-md-block">
                        <h2>限時特惠</h2>
                        <p>精選商品限時折扣，立即選購！</p>
                        <a th:href="@{/products}" class="btn btn-primary">查看詳情</a>
                    </div>
                </div>
                <div class="carousel-item">
                    <img src="https://via.placeholder.com/1200x400?text=促銷活動2" class="d-block w-100" alt="促銷活動2">
                    <div class="carousel-caption d-none d-md-block">
                        <h2>新品上市</h2>
                        <p>最新商品搶先體驗，限量供應！</p>
                        <a th:href="@{/products}" class="btn btn-primary">立即選購</a>
                    </div>
                </div>
                <div class="carousel-item">
                    <img src="https://via.placeholder.com/1200x400?text=促銷活動3" class="d-block w-100" alt="促銷活動3">
                    <div class="carousel-caption d-none d-md-block">
                        <h2>會員專屬</h2>
                        <p>會員獨享優惠，更多驚喜等你發現！</p>
                        <a th:href="@{/register}" class="btn btn-primary">立即註冊</a>
                    </div>
                </div>
            </div>
            <button class="carousel-control-prev" type="button" data-bs-target="#homeCarousel" data-bs-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="visually-hidden">上一個</span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#homeCarousel" data-bs-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="visually-hidden">下一個</span>
            </button>
        </div>

        <!-- 商品分類 -->
        <div class="row mb-4">
            <div class="col-12">
                <h2 class="border-bottom pb-2">商品分類</h2>
            </div>
            <div class="col-12">
                <div class="row row-cols-2 row-cols-md-4 row-cols-lg-6 g-3">
                    <div class="col" th:each="category : ${categories}">
                        <a th:href="@{/products(categoryId=${category.id})}" class="text-decoration-none">
                            <div class="card h-100 text-center shadow-sm">
                                <div class="card-body">
                                    <i class="bi bi-tag fs-1"></i>
                                    <h5 class="card-title mt-2" th:text="${category.name}">分類名稱</h5>
                                </div>
                            </div>
                        </a>
                    </div>
                    <!-- 如果沒有分類，顯示提示信息 -->
                    <div class="col-12" th:if="${#lists.isEmpty(categories)}">
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle"></i> 暫無商品分類
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- 熱門商品 -->
        <div class="row mb-4">
            <div class="col-12">
                <h2 class="border-bottom pb-2">熱門商品</h2>
            </div>
            <div class="col-12">
                <div class="row row-cols-1 row-cols-md-2 row-cols-lg-4 g-4">
                    <div class="col" th:each="product : ${featuredProducts}">
                        <div class="card h-100 shadow-sm">
                            <img th:src="${product.imageUrl} ?: 'https://via.placeholder.com/300x200?text=商品圖片'" 
                                 class="card-img-top" alt="商品圖片">
                            <div class="card-body">
                                <h5 class="card-title" th:text="${product.name}">商品名稱</h5>
                                <p class="card-text text-truncate" th:text="${product.description}">商品描述...</p>
                                <p class="card-text text-danger fw-bold" th:text="'NT$ ' + ${product.price}">NT$ 1000</p>
                                <p class="card-text small" th:if="${product.stock > 0}">
                                    <span class="text-success">
                                        <i class="bi bi-check-circle"></i> 有庫存
                                    </span>
                                </p>
                                <p class="card-text small text-danger" th:if="${product.stock <= 0}">
                                    <i class="bi bi-x-circle"></i> 缺貨中
                                </p>
                            </div>
                            <div class="card-footer bg-transparent border-top-0">
                                <div class="d-flex justify-content-between">
                                    <a th:href="@{/products/{id}(id=${product.id})}" class="btn btn-sm btn-outline-primary">
                                        <i class="bi bi-info-circle"></i> 詳情
                                    </a>
                                    <button class="btn btn-sm btn-primary add-to-cart" 
                                            th:attr="data-product-id=${product.id}"
                                            th:disabled="${product.stock <= 0}">
                                        <i class="bi bi-cart-plus"></i> 加入購物車
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- 如果沒有熱門商品，顯示提示信息 -->
                    <div class="col-12" th:if="${#lists.isEmpty(featuredProducts)}">
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle"></i> 暫無熱門商品
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-12 text-center mt-3">
                <a th:href="@{/products}" class="btn btn-outline-primary">查看更多商品</a>
            </div>
        </div>

        <!-- 最新商品 -->
        <div class="row mb-4">
            <div class="col-12">
                <h2 class="border-bottom pb-2">最新上架</h2>
            </div>
            <div class="col-12">
                <div class="row row-cols-1 row-cols-md-2 row-cols-lg-4 g-4">
                    <div class="col" th:each="product : ${newProducts}">
                        <div class="card h-100 shadow-sm">
                            <div class="position-absolute top-0 end-0 p-2">
                                <span class="badge bg-success">新品</span>
                            </div>
                            <img th:src="${product.imageUrl} ?: 'https://via.placeholder.com/300x200?text=商品圖片'" 
                                 class="card-img-top" alt="商品圖片">
                            <div class="card-body">
                                <h5 class="card-title" th:text="${product.name}">商品名稱</h5>
                                <p class="card-text text-truncate" th:text="${product.description}">商品描述...</p>
                                <p class="card-text text-danger fw-bold" th:text="'NT$ ' + ${product.price}">NT$ 1000</p>
                                <p class="card-text small" th:if="${product.stock > 0}">
                                    <span class="text-success">
                                        <i class="bi bi-check-circle"></i> 有庫存
                                    </span>
                                </p>
                                <p class="card-text small text-danger" th:if="${product.stock <= 0}">
                                    <i class="bi bi-x-circle"></i> 缺貨中
                                </p>
                            </div>
                            <div class="card-footer bg-transparent border-top-0">
                                <div class="d-flex justify-content-between">
                                    <a th:href="@{/products/{id}(id=${product.id})}" class="btn btn-sm btn-outline-primary">
                                        <i class="bi bi-info-circle"></i> 詳情
                                    </a>
                                    <button class="btn btn-sm btn-primary add-to-cart" 
                                            th:attr="data-product-id=${product.id}"
                                            th:disabled="${product.stock <= 0}">
                                        <i class="bi bi-cart-plus"></i> 加入購物車
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- 如果沒有最新商品，顯示提示信息 -->
                    <div class="col-12" th:if="${#lists.isEmpty(newProducts)}">
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle"></i> 暫無最新商品
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-12 text-center mt-3">
                <a th:href="@{/products}" class="btn btn-outline-primary">查看更多商品</a>
            </div>
        </div>

        <!-- 優惠信息 -->
        <div class="row mb-4">
            <div class="col-md-4 mb-3 mb-md-0">
                <div class="card text-center h-100 shadow-sm">
                    <div class="card-body">
                        <i class="bi bi-truck fs-1 text-primary"></i>
                        <h5 class="card-title mt-2">免費配送</h5>
                        <p class="card-text">訂單滿NT$ 1000即可享受免費配送服務</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-3 mb-md-0">
                <div class="card text-center h-100 shadow-sm">
                    <div class="card-body">
                        <i class="bi bi-shield-check fs-1 text-primary"></i>
                        <h5 class="card-title mt-2">品質保證</h5>
                        <p class="card-text">所有商品均經過嚴格品質檢測，保證正品</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card text-center h-100 shadow-sm">
                    <div class="card-body">
                        <i class="bi bi-headset fs-1 text-primary"></i>
                        <h5 class="card-title mt-2">24/7客服支持</h5>
                        <p class="card-text">隨時為您提供專業的購物諮詢和售後服務</p>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <script>
        // 加入購物車功能
        document.addEventListener('DOMContentLoaded', function() {
            const addToCartButtons = document.querySelectorAll('.add-to-cart');
            
            addToCartButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const productId = this.getAttribute('data-product-id');
                    
                    // 檢查用戶是否登入
                    fetch('/api/auth/check-auth', {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => {
                        if (!response.ok) {
                            // 用戶未登入，跳轉到登入頁面
                            window.location.href = '/login?redirect=' + encodeURIComponent(window.location.pathname);
                            throw new Error('請先登入');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // 用戶已登入，添加商品到購物車
                        return fetch('/api/cart/items', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': 'Bearer ' + localStorage.getItem('token')
                            },
                            body: JSON.stringify({
                                productId: productId,
                                quantity: 1
                            })
                        });
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('添加商品到購物車失敗');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // 顯示成功訊息
                        alert('商品已成功加入購物車！');
                        // 更新購物車數量顯示
                        updateCartItemCount();
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
                });
            });
            
            // 更新購物車數量
            function updateCartItemCount() {
                // 檢查用戶是否登入
                fetch('/api/auth/check-auth', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + localStorage.getItem('token')
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('用戶未登入');
                    }
                    return response.json();
                })
                .then(data => {
                    // 用戶已登入，獲取購物車資料
                    return fetch('/api/cart', {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': 'Bearer ' + localStorage.getItem('token')
                        }
                    });
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('獲取購物車資料失敗');
                    }
                    return response.json();
                })
                .then(data => {
                    // 更新購物車數量顯示
                    const cartItemCount = document.querySelector('.position-relative .badge');
                    if (cartItemCount && data.items) {
                        cartItemCount.textContent = data.items.length;
                        cartItemCount.style.display = data.items.length > 0 ? 'block' : 'none';
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            }
            
            // 頁面加載時更新購物車數量
            updateCartItemCount();
        });
    </script>
</body>
</html>

================
File: src/main/resources/templates/layout/default.html
================
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" 
      xmlns:sec="http://www.thymeleaf.org/thymeleaf-extras-springsecurity6"
      th:fragment="html(title, main, links, scripts)">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title th:replace="${title}">電商系統</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <!-- 自定義 CSS -->
    <link th:href="@{/css/style.css}" rel="stylesheet">
    
    <!-- 額外的CSS -->
    <th:block th:replace="${links}" />
    
    <style>
        body {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
        main {
            flex: 1;
            padding: 20px 0;
        }
        .footer {
            background-color: #f8f9fa;
            padding: 20px 0;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <!-- 頁頭 -->
    <header>
        <nav class="navbar navbar-expand-lg navbar-light bg-light shadow-sm">
            <div class="container">
                <a class="navbar-brand" th:href="@{/}">
                    <i class="bi bi-shop"></i> 電商系統
                </a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                        aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav me-auto">
                        <li class="nav-item">
                            <a class="nav-link" th:href="@{/}">首頁</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" th:href="@{/products}">商品列表</a>
                        </li>
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button"
                               data-bs-toggle="dropdown" aria-expanded="false">
                                商品分類
                            </a>
                            <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                                <li th:each="category : ${categories}">
                                    <a class="dropdown-item" th:href="@{/products(categoryId=${category.id})}" 
                                       th:text="${category.name}">分類名稱</a>
                                </li>
                                <li th:if="${#lists.isEmpty(categories)}">
                                    <span class="dropdown-item disabled">暫無分類</span>
                                </li>
                            </ul>
                        </li>
                        <li class="nav-item" sec:authorize="hasRole('ROLE_ADMIN')">
                            <a class="nav-link" th:href="@{/admin}">管理後台</a>
                        </li>
                    </ul>
                    
                    <!-- 搜索框 -->
                    <form class="d-flex me-2" th:action="@{/products}" method="get">
                        <input class="form-control me-2" type="search" placeholder="搜索商品" name="keyword"
                               th:value="${param.keyword}" aria-label="搜索">
                        <button class="btn btn-outline-primary" type="submit">搜索</button>
                    </form>
                    
                    <!-- 用戶菜單 -->
                    <ul class="navbar-nav">
                        <li class="nav-item" sec:authorize="!isAuthenticated()">
                            <a class="nav-link" th:href="@{/login}">登入</a>
                        </li>
                        <li class="nav-item" sec:authorize="!isAuthenticated()">
                            <a class="nav-link" th:href="@{/register}">註冊</a>
                        </li>
                        <li class="nav-item" sec:authorize="isAuthenticated()">
                            <a class="nav-link position-relative" th:href="@{/cart}">
                                <i class="bi bi-cart"></i> 購物車
                                <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger"
                                      th:if="${cartItemCount != null && cartItemCount > 0}"
                                      th:text="${cartItemCount}">
                                    0
                                </span>
                            </a>
                        </li>
                        <li class="nav-item dropdown" sec:authorize="isAuthenticated()">
                            <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button"
                               data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="bi bi-person-circle"></i> <span sec:authentication="name">用戶名</span>
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
                                <li><a class="dropdown-item" th:href="@{/profile}">個人資料</a></li>
                                <li><a class="dropdown-item" th:href="@{/orders}">我的訂單</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li>
                                    <form th:action="@{/logout}" method="post">
                                        <button class="dropdown-item" type="submit">登出</button>
                                    </form>
                                </li>
                            </ul>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    
    <!-- 主要內容 -->
    <div class="container">
        <th:block th:replace="${main}" />
    </div>
    
    <!-- 頁尾 -->
    <footer class="footer">
        <div class="container">
            <div class="row">
                <div class="col-md-4 mb-3 mb-md-0">
                    <h5>關於我們</h5>
                    <p>電商系統是一個基於Spring Boot開發的完整電子商務解決方案，提供會員管理、商品管理、購物車管理、訂單管理和支付管理等功能。</p>
                </div>
                <div class="col-md-4 mb-3 mb-md-0">
                    <h5>聯繫我們</h5>
                    <ul class="list-unstyled">
                        <li><i class="bi bi-envelope"></i> support@example.com</li>
                        <li><i class="bi bi-telephone"></i> +886 2 1234 5678</li>
                        <li><i class="bi bi-geo-alt"></i> 台北市信義區101大樓</li>
                    </ul>
                </div>
                <div class="col-md-4">
                    <h5>關注我們</h5>
                    <div class="d-flex">
                        <a href="#" class="me-2 text-decoration-none">
                            <i class="bi bi-facebook fs-4"></i>
                        </a>
                        <a href="#" class="me-2 text-decoration-none">
                            <i class="bi bi-twitter fs-4"></i>
                        </a>
                        <a href="#" class="me-2 text-decoration-none">
                            <i class="bi bi-instagram fs-4"></i>
                        </a>
                        <a href="#" class="text-decoration-none">
                            <i class="bi bi-linkedin fs-4"></i>
                        </a>
                    </div>
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-12 text-center">
                    <p class="mb-0">&copy; 2025 電商系統. 版權所有.</p>
                </div>
            </div>
        </div>
    </footer>
    
    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- 額外的JavaScript -->
    <th:block th:replace="${scripts}" />
    
    <!-- 通用JavaScript -->
    <script>
        // 獲取和存儲JWT令牌
        document.addEventListener('DOMContentLoaded', function() {
            // 從URL參數中獲取token
            const urlParams = new URLSearchParams(window.location.search);
            const token = urlParams.get('token');
            
            // 如果URL中有token，則存儲它
            if (token) {
                localStorage.setItem('token', token);
                
                // 移除URL中的token參數
                urlParams.delete('token');
                const newUrl = window.location.pathname + (urlParams.toString() ? '?' + urlParams.toString() : '');
                window.history.replaceState({}, document.title, newUrl);
            }
            
            // 為所有需要授權的請求添加JWT令牌
            const originalFetch = window.fetch;
            window.fetch = function(url, options) {
                options = options || {};
                options.headers = options.headers || {};
                
                // 如果已經有Authorization頭，或者是登入/註冊請求，則不添加令牌
                if (!options.headers.Authorization && !url.includes('/api/auth/signin') && !url.includes('/api/auth/signup')) {
                    const token = localStorage.getItem('token');
                    if (token) {
                        options.headers.Authorization = 'Bearer ' + token;
                    }
                }
                
                return originalFetch(url, options);
            };
        });
    </script>
</body>
</html>

================
File: src/main/resources/templates/login.html
================
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"
      th:replace="~{layout/default :: html(~{::title}, ~{::main}, ~{::link}, ~{::script})}">
<head>
    <title>會員登入 - 電商系統</title>
    <link rel="stylesheet" href="">
</head>
<body>
    <main>
        <div class="row justify-content-center">
            <div class="col-md-6 col-lg-5">
                <div class="card shadow-sm">
                    <div class="card-header bg-primary text-white">
                        <h4 class="mb-0">會員登入</h4>
                    </div>
                    <div class="card-body">
                        <!-- 登入失敗提示 -->
                        <div class="alert alert-danger" th:if="${param.error}">
                            <i class="bi bi-exclamation-triangle-fill"></i> 
                            登入失敗，請檢查您的用戶名和密碼是否正確。
                        </div>
                        
                        <!-- 登出成功提示 -->
                        <div class="alert alert-success" th:if="${param.logout}">
                            <i class="bi bi-check-circle-fill"></i> 
                            您已成功登出。
                        </div>
                        
                        <!-- 令牌過期提示 -->
                        <div class="alert alert-warning" th:if="${param.expired}">
                            <i class="bi bi-exclamation-triangle-fill"></i> 
                            您的登入狀態已過期，請重新登入。
                        </div>
                        
                        <!-- 登入表單 -->
                        <form id="loginForm" class="mt-4">
                            <div class="mb-3">
                                <label for="username" class="form-label">用戶名或電子郵件</label>
                                <input type="text" class="form-control" id="username" name="username" required>
                            </div>
                            <div class="mb-3">
                                <label for="password" class="form-label">密碼</label>
                                <div class="input-group">
                                    <input type="password" class="form-control" id="password" name="password" required>
                                    <button class="btn btn-outline-secondary" type="button" id="togglePassword">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="mb-3 form-check">
                                <input type="checkbox" class="form-check-input" id="rememberMe" name="rememberMe">
                                <label class="form-check-label" for="rememberMe">記住我</label>
                            </div>
                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary">登入</button>
                                <a th:href="@{/forgot-password}" class="btn btn-link">忘記密碼？</a>
                            </div>
                        </form>
                        
                        <hr class="my-4">
                        
                        <!-- 註冊提示 -->
                        <div class="text-center">
                            <p>還沒有帳號？ <a th:href="@{/register}" class="fw-bold">立即註冊</a></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // 切換密碼可見性
            const togglePassword = document.getElementById('togglePassword');
            const password = document.getElementById('password');
            
            togglePassword.addEventListener('click', function() {
                const type = password.getAttribute('type') === 'password' ? 'text' : 'password';
                password.setAttribute('type', type);
                
                // 切換眼睛圖標
                this.querySelector('i').classList.toggle('bi-eye');
                this.querySelector('i').classList.toggle('bi-eye-slash');
            });
            
            // 處理登入表單提交
            const loginForm = document.getElementById('loginForm');
            
            loginForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const username = document.getElementById('username').value;
                const password = document.getElementById('password').value;
                const rememberMe = document.getElementById('rememberMe').checked;
                
                // 發送登入請求
                fetch('/api/auth/signin', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        username: username,
                        password: password
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('登入失敗');
                    }
                    return response.json();
                })
                .then(data => {
                    // 存儲JWT令牌
                    localStorage.setItem('token', data.token);
                    
                    // 如果選擇了記住我，則設置較長的過期時間
                    if (rememberMe) {
                        // 30天後過期
                        const expiryDate = new Date();
                        expiryDate.setDate(expiryDate.getDate() + 30);
                        localStorage.setItem('tokenExpiry', expiryDate.toISOString());
                    } else {
                        // 會話結束後過期
                        localStorage.setItem('tokenExpiry', 'session');
                    }
                    
                    // 存儲用戶信息
                    localStorage.setItem('user', JSON.stringify({
                        id: data.id,
                        username: data.username,
                        email: data.email,
                        roles: data.roles
                    }));
                    
                    // 獲取重定向URL
                    const urlParams = new URLSearchParams(window.location.search);
                    const redirectUrl = urlParams.get('redirect') || '/';
                    
                    // 重定向到指定頁面或首頁
                    window.location.href = redirectUrl;
                })
                .catch(error => {
                    console.error('Error:', error);
                    // 顯示錯誤訊息
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'alert alert-danger';
                    errorDiv.innerHTML = '<i class="bi bi-exclamation-triangle-fill"></i> 登入失敗，請檢查您的用戶名和密碼是否正確。';
                    
                    // 移除之前的錯誤訊息
                    const existingError = loginForm.querySelector('.alert-danger');
                    if (existingError) {
                        existingError.remove();
                    }
                    
                    // 插入新的錯誤訊息
                    loginForm.insertBefore(errorDiv, loginForm.firstChild);
                });
            });
        });
    </script>
</body>
</html>

================
File: src/main/resources/templates/product-detail.html
================
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"
      th:replace="~{layout/default :: html(~{::title}, ~{::main}, ~{::link}, ~{::script})}">
<head>
    <title th:text="${product.name} + ' - 電商系統'">商品詳情 - 電商系統</title>
    <link rel="stylesheet" href="">
</head>
<body>
    <main>
        <div class="row" th:if="${product != null}">
            <!-- 麵包屑導航 -->
            <nav aria-label="breadcrumb" class="mb-4">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a th:href="@{/}">首頁</a></li>
                    <li class="breadcrumb-item"><a th:href="@{/products}">商品列表</a></li>
                    <li class="breadcrumb-item" th:if="${product.category != null}">
                        <a th:href="@{/products(categoryId=${product.category.id})}" th:text="${product.category.name}">分類名稱</a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page" th:text="${product.name}">商品名稱</li>
                </ol>
            </nav>
            
            <!-- 商品詳情 -->
            <div class="col-md-6 mb-4">
                <div class="card shadow-sm">
                    <div class="card-body p-0">
                        <img th:src="${product.imageUrl} ?: 'https://via.placeholder.com/600x400?text=商品圖片'" 
                             class="img-fluid rounded" alt="商品圖片">
                    </div>
                </div>
            </div>
            
            <div class="col-md-6 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-body">
                        <h2 class="card-title mb-3" th:text="${product.name}">商品名稱</h2>
                        
                        <div class="mb-3">
                            <span class="badge bg-primary" th:if="${product.category != null}" th:text="${product.category.name}">分類名稱</span>
                            <span class="badge bg-success" th:if="${product.stock > 0}">有庫存</span>
                            <span class="badge bg-danger" th:if="${product.stock <= 0}">缺貨中</span>
                        </div>
                        
                        <h3 class="text-danger mb-4" th:text="'NT$ ' + ${product.price}">NT$ 1000</h3>
                        
                        <div class="mb-4">
                            <p th:text="${product.description}">商品描述...</p>
                        </div>
                        
                        <div class="mb-4">
                            <p class="mb-1">庫存狀態：</p>
                            <div class="progress mb-2" style="height: 20px;">
                                <div class="progress-bar" role="progressbar" 
                                     th:style="'width: ' + (${product.stock > 100 ? 100 : product.stock}) + '%'" 
                                     th:text="${product.stock} + ' 件'">
                                    庫存數量
                                </div>
                            </div>
                            <p class="text-success" th:if="${product.stock > 20}">
                                <i class="bi bi-check-circle"></i> 庫存充足
                            </p>
                            <p class="text-warning" th:if="${product.stock <= 20 && product.stock > 0}">
                                <i class="bi bi-exclamation-triangle"></i> 庫存有限，請盡快購買
                            </p>
                            <p class="text-danger" th:if="${product.stock <= 0}">
                                <i class="bi bi-x-circle"></i> 目前缺貨中
                            </p>
                        </div>
                        
                        <form id="add-to-cart-form" class="mb-4" th:if="${product.stock > 0}">
                            <div class="row g-3 align-items-center">
                                <div class="col-auto">
                                    <label for="quantity" class="col-form-label">數量：</label>
                                </div>
                                <div class="col-auto">
                                    <input type="number" id="quantity" class="form-control" value="1" min="1" 
                                           th:max="${product.stock}" th:attr="data-max=${product.stock}">
                                </div>
                                <div class="col-auto">
                                    <span class="form-text" th:text="'可購買數量：' + ${product.stock} + ' 件'">
                                        可購買數量：100 件
                                    </span>
                                </div>
                            </div>
                            
                            <div class="d-grid gap-2 mt-4">
                                <button type="button" id="add-to-cart-btn" class="btn btn-primary btn-lg" 
                                        th:attr="data-product-id=${product.id}">
                                    <i class="bi bi-cart-plus"></i> 加入購物車
                                </button>
                                <button type="button" id="buy-now-btn" class="btn btn-danger btn-lg">
                                    <i class="bi bi-lightning"></i> 立即購買
                                </button>
                            </div>
                        </form>
                        
                        <div class="alert alert-danger" th:if="${product.stock <= 0}">
                            <i class="bi bi-exclamation-triangle"></i> 此商品目前缺貨中，請稍後再來購買或選擇其他商品。
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- 商品詳細描述 -->
            <div class="col-12 mb-5">
                <div class="card shadow-sm">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">商品詳細描述</h5>
                    </div>
                    <div class="card-body">
                        <div class="product-description" th:utext="${product.description}">
                            <p>商品詳細描述...</p>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- 相關商品 -->
            <div class="col-12 mb-4" th:if="${!#lists.isEmpty(relatedProducts)}">
                <h3 class="border-bottom pb-2 mb-4">相關商品</h3>
                <div class="row row-cols-1 row-cols-md-2 row-cols-lg-4 g-4">
                    <div class="col" th:each="relatedProduct : ${relatedProducts}" th:if="${relatedProduct.id != product.id}">
                        <div class="card h-100 shadow-sm">
                            <img th:src="${relatedProduct.imageUrl} ?: 'https://via.placeholder.com/300x200?text=商品圖片'" 
                                 class="card-img-top" alt="商品圖片">
                            <div class="card-body">
                                <h5 class="card-title" th:text="${relatedProduct.name}">商品名稱</h5>
                                <p class="card-text text-truncate" th:text="${relatedProduct.description}">商品描述...</p>
                                <p class="card-text text-danger fw-bold" th:text="'NT$ ' + ${relatedProduct.price}">NT$ 1000</p>
                            </div>
                            <div class="card-footer bg-transparent border-top-0">
                                <div class="d-flex justify-content-between">
                                    <a th:href="@{/products/{id}(id=${relatedProduct.id})}" class="btn btn-sm btn-outline-primary">
                                        <i class="bi bi-info-circle"></i> 詳情
                                    </a>
                                    <button class="btn btn-sm btn-primary add-to-cart" 
                                            th:attr="data-product-id=${relatedProduct.id}"
                                            th:disabled="${relatedProduct.stock <= 0}">
                                        <i class="bi bi-cart-plus"></i> 加入購物車
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- 商品不存在時顯示 -->
        <div class="alert alert-danger" th:if="${product == null}">
            <h4 class="alert-heading">商品不存在！</h4>
            <p>您嘗試訪問的商品不存在或已被刪除。</p>
            <hr>
            <p class="mb-0">請返回<a th:href="@{/products}" class="alert-link">商品列表</a>選擇其他商品。</p>
        </div>
    </main>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // 數量輸入框驗證
            const quantityInput = document.getElementById('quantity');
            if (quantityInput) {
                quantityInput.addEventListener('change', function() {
                    const max = parseInt(this.getAttribute('data-max'));
                    const value = parseInt(this.value);
                    
                    if (isNaN(value) || value < 1) {
                        this.value = 1;
                    } else if (value > max) {
                        this.value = max;
                        alert('已超過可購買數量上限！');
                    }
                });
            }
            
            // 加入購物車按鈕點擊事件
            const addToCartBtn = document.getElementById('add-to-cart-btn');
            if (addToCartBtn) {
                addToCartBtn.addEventListener('click', function() {
                    const productId = this.getAttribute('data-product-id');
                    const quantity = parseInt(document.getElementById('quantity').value);
                    
                    // 檢查用戶是否登入
                    fetch('/api/auth/check-auth', {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => {
                        if (!response.ok) {
                            // 用戶未登入，跳轉到登入頁面
                            window.location.href = '/login?redirect=' + encodeURIComponent(window.location.pathname);
                            throw new Error('請先登入');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // 用戶已登入，添加商品到購物車
                        return fetch('/api/cart/items', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                productId: productId,
                                quantity: quantity
                            })
                        });
                    })
                    .then(response => response.json())
                    .then(data => {
                        // 顯示成功訊息
                        alert('商品已成功加入購物車！');
                        // 更新購物車數量顯示
                        updateCartItemCount();
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
                });
            }
            
            // 立即購買按鈕點擊事件
            const buyNowBtn = document.getElementById('buy-now-btn');
            if (buyNowBtn) {
                buyNowBtn.addEventListener('click', function() {
                    const productId = document.getElementById('add-to-cart-btn').getAttribute('data-product-id');
                    const quantity = parseInt(document.getElementById('quantity').value);
                    
                    // 檢查用戶是否登入
                    fetch('/api/auth/check-auth', {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => {
                        if (!response.ok) {
                            // 用戶未登入，跳轉到登入頁面
                            window.location.href = '/login?redirect=' + encodeURIComponent(window.location.pathname);
                            throw new Error('請先登入');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // 用戶已登入，添加商品到購物車
                        return fetch('/api/cart/items', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                productId: productId,
                                quantity: quantity
                            })
                        });
                    })
                    .then(response => response.json())
                    .then(data => {
                        // 跳轉到結帳頁面
                        window.location.href = '/checkout';
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
                });
            }
            
            // 相關商品加入購物車按鈕點擊事件
            const relatedAddToCartButtons = document.querySelectorAll('.add-to-cart');
            
            relatedAddToCartButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const productId = this.getAttribute('data-product-id');
                    
                    // 檢查用戶是否登入
                    fetch('/api/auth/check-auth', {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => {
                        if (!response.ok) {
                            // 用戶未登入，跳轉到登入頁面
                            window.location.href = '/login?redirect=' + encodeURIComponent(window.location.pathname);
                            throw new Error('請先登入');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // 用戶已登入，添加商品到購物車
                        return fetch('/api/cart/items', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                productId: productId,
                                quantity: 1
                            })
                        });
                    })
                    .then(response => response.json())
                    .then(data => {
                        // 顯示成功訊息
                        alert('商品已成功加入購物車！');
                        // 更新購物車數量顯示
                        updateCartItemCount();
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
                });
            });
            
            // 更新購物車數量
            function updateCartItemCount() {
                fetch('/api/cart', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('獲取購物車資料失敗');
                    }
                    return response.json();
                })
                .then(data => {
                    // 更新購物車數量顯示
                    const cartItemCount = document.querySelector('.position-relative .badge');
                    if (cartItemCount) {
                        cartItemCount.textContent = data.items.length;
                        cartItemCount.style.display = data.items.length > 0 ? 'block' : 'none';
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            }
        });
    </script>
</body>
</html>

================
File: src/main/resources/templates/product-list.html
================
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"
      th:replace="~{layout/default :: html(~{::title}, ~{::main}, ~{::link}, ~{::script})}">
<head>
    <title>商品列表 - 電商系統</title>
    <link rel="stylesheet" href="">
</head>
<body>
    <main>
        <div class="row">
            <!-- 側邊欄過濾器 -->
            <div class="col-md-3 mb-4">
                <div class="card shadow-sm">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">商品過濾</h5>
                    </div>
                    <div class="card-body">
                        <!-- 分類過濾 -->
                        <div class="mb-4">
                            <h6 class="border-bottom pb-2">商品分類</h6>
                            <div class="form-check" th:each="category : ${categories}">
                                <input class="form-check-input category-filter" type="checkbox" 
                                       th:value="${category.id}" th:id="'category-' + ${category.id}"
                                       th:checked="${param.categoryId != null && param.categoryId[0] == category.id.toString()}">
                                <label class="form-check-label" th:for="'category-' + ${category.id}" 
                                       th:text="${category.name}">分類名稱</label>
                            </div>
                        </div>
                        
                        <!-- 價格範圍過濾 -->
                        <div class="mb-4">
                            <h6 class="border-bottom pb-2">價格範圍</h6>
                            <div class="row g-2">
                                <div class="col-6">
                                    <input type="number" class="form-control form-control-sm" id="price-min" 
                                           placeholder="最低價" th:value="${param.minPrice}">
                                </div>
                                <div class="col-6">
                                    <input type="number" class="form-control form-control-sm" id="price-max" 
                                           placeholder="最高價" th:value="${param.maxPrice}">
                                </div>
                            </div>
                        </div>
                        
                        <!-- 排序選項 -->
                        <div class="mb-4">
                            <h6 class="border-bottom pb-2">排序方式</h6>
                            <select class="form-select form-select-sm" id="sort-by">
                                <option value="id,desc" th:selected="${param.sort == null || param.sort[0] == 'id,desc'}">最新上架</option>
                                <option value="price,asc" th:selected="${param.sort != null && param.sort[0] == 'price,asc'}">價格從低到高</option>
                                <option value="price,desc" th:selected="${param.sort != null && param.sort[0] == 'price,desc'}">價格從高到低</option>
                                <option value="name,asc" th:selected="${param.sort != null && param.sort[0] == 'name,asc'}">名稱 A-Z</option>
                                <option value="name,desc" th:selected="${param.sort != null && param.sort[0] == 'name,desc'}">名稱 Z-A</option>
                            </select>
                        </div>
                        
                        <!-- 應用過濾按鈕 -->
                        <button id="apply-filter" class="btn btn-primary w-100">應用過濾</button>
                    </div>
                </div>
            </div>
            
            <!-- 商品列表 -->
            <div class="col-md-9">
                <!-- 搜索結果提示 -->
                <div class="alert alert-info" th:if="${param.keyword != null && param.keyword[0] != ''}">
                    <i class="bi bi-search"></i> 
                    搜索結果：<span th:text="${param.keyword[0]}">關鍵字</span>
                    <a th:href="@{/products}" class="float-end">清除搜索</a>
                </div>
                
                <!-- 分類提示 -->
                <div class="alert alert-info" th:if="${param.categoryId != null && param.categoryId[0] != ''}">
                    <i class="bi bi-tag"></i> 
                    分類：<span th:text="${categories.stream().filter(c -> c.id.toString() == param.categoryId[0]).findFirst().orElse(new Category()).name}">分類名稱</span>
                    <a th:href="@{/products}" class="float-end">查看所有分類</a>
                </div>
                
                <!-- 商品網格 -->
                <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4 mb-4">
                    <div class="col" th:each="product : ${products}">
                        <div class="card h-100 shadow-sm">
                            <img th:src="${product.imageUrl} ?: 'https://via.placeholder.com/300x200?text=商品圖片'" 
                                 class="card-img-top" alt="商品圖片">
                            <div class="card-body">
                                <h5 class="card-title" th:text="${product.name}">商品名稱</h5>
                                <p class="card-text text-truncate" th:text="${product.description}">商品描述...</p>
                                <p class="card-text text-danger fw-bold" th:text="'NT$ ' + ${product.price}">NT$ 1000</p>
                                <p class="card-text small" th:if="${product.stock > 0}">
                                    <span class="text-success">
                                        <i class="bi bi-check-circle"></i> 有庫存
                                    </span>
                                    <span class="text-muted" th:text="'(' + ${product.stock} + '件)'"></span>
                                </p>
                                <p class="card-text small text-danger" th:if="${product.stock <= 0}">
                                    <i class="bi bi-x-circle"></i> 缺貨中
                                </p>
                            </div>
                            <div class="card-footer bg-transparent border-top-0">
                                <div class="d-flex justify-content-between">
                                    <a th:href="@{/products/{id}(id=${product.id})}" class="btn btn-sm btn-outline-primary">
                                        <i class="bi bi-info-circle"></i> 詳情
                                    </a>
                                    <button class="btn btn-sm btn-primary add-to-cart" 
                                            th:attr="data-product-id=${product.id}"
                                            th:disabled="${product.stock <= 0}">
                                        <i class="bi bi-cart-plus"></i> 加入購物車
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- 沒有商品時顯示 -->
                    <div class="col-12" th:if="${#lists.isEmpty(products)}">
                        <div class="alert alert-warning text-center">
                            <i class="bi bi-exclamation-triangle"></i> 沒有找到符合條件的商品
                        </div>
                    </div>
                </div>
                
                <!-- 分頁 -->
                <nav th:if="${totalPages > 1}">
                    <ul class="pagination justify-content-center">
                        <li class="page-item" th:classappend="${currentPage == 0} ? 'disabled' : ''">
                            <a class="page-link" th:href="@{/products(page=${currentPage - 1}, size=12, sort=${param.sort}, keyword=${param.keyword}, categoryId=${param.categoryId}, minPrice=${param.minPrice}, maxPrice=${param.maxPrice})}" aria-label="上一頁">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                        <li class="page-item" th:each="i : ${#numbers.sequence(0, totalPages - 1)}" 
                            th:classappend="${currentPage == i} ? 'active' : ''">
                            <a class="page-link" th:href="@{/products(page=${i}, size=12, sort=${param.sort}, keyword=${param.keyword}, categoryId=${param.categoryId}, minPrice=${param.minPrice}, maxPrice=${param.maxPrice})}" 
                               th:text="${i + 1}">1</a>
                        </li>
                        <li class="page-item" th:classappend="${currentPage == totalPages - 1} ? 'disabled' : ''">
                            <a class="page-link" th:href="@{/products(page=${currentPage + 1}, size=12, sort=${param.sort}, keyword=${param.keyword}, categoryId=${param.categoryId}, minPrice=${param.minPrice}, maxPrice=${param.maxPrice})}" aria-label="下一頁">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    </main>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // 應用過濾按鈕點擊事件
            document.getElementById('apply-filter').addEventListener('click', function() {
                // 獲取所有選中的分類
                const selectedCategories = Array.from(document.querySelectorAll('.category-filter:checked'))
                    .map(checkbox => checkbox.value);
                
                // 獲取價格範圍
                const minPrice = document.getElementById('price-min').value;
                const maxPrice = document.getElementById('price-max').value;
                
                // 獲取排序方式
                const sortBy = document.getElementById('sort-by').value;
                
                // 構建URL參數
                let params = new URLSearchParams();
                
                // 添加分類參數
                if (selectedCategories.length === 1) {
                    params.append('categoryId', selectedCategories[0]);
                }
                
                // 添加價格範圍參數
                if (minPrice) {
                    params.append('minPrice', minPrice);
                }
                if (maxPrice) {
                    params.append('maxPrice', maxPrice);
                }
                
                // 添加排序參數
                params.append('sort', sortBy);
                
                // 保留搜索關鍵字參數
                const urlParams = new URLSearchParams(window.location.search);
                if (urlParams.has('keyword')) {
                    params.append('keyword', urlParams.get('keyword'));
                }
                
                // 跳轉到過濾後的URL
                window.location.href = '/products?' + params.toString();
            });
            
            // 加入購物車功能
            const addToCartButtons = document.querySelectorAll('.add-to-cart');
            
            addToCartButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const productId = this.getAttribute('data-product-id');
                    
                    // 檢查用戶是否登入
                    fetch('/api/auth/check-auth', {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => {
                        if (!response.ok) {
                            // 用戶未登入，跳轉到登入頁面
                            window.location.href = '/login?redirect=' + encodeURIComponent(window.location.pathname + window.location.search);
                            throw new Error('請先登入');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // 用戶已登入，添加商品到購物車
                        return fetch('/api/cart/items', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                productId: productId,
                                quantity: 1
                            })
                        });
                    })
                    .then(response => response.json())
                    .then(data => {
                        // 顯示成功訊息
                        alert('商品已成功加入購物車！');
                        // 更新購物車數量顯示
                        updateCartItemCount();
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
                });
            });
            
            // 更新購物車數量
            function updateCartItemCount() {
                fetch('/api/cart', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('獲取購物車資料失敗');
                    }
                    return response.json();
                })
                .then(data => {
                    // 更新購物車數量顯示
                    const cartItemCount = document.querySelector('.position-relative .badge');
                    if (cartItemCount) {
                        cartItemCount.textContent = data.items.length;
                        cartItemCount.style.display = data.items.length > 0 ? 'block' : 'none';
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            }
        });
    </script>
</body>
</html>

================
File: src/main/resources/templates/profile.html
================
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"
      th:replace="~{layout/default :: html(~{::title}, ~{::main}, ~{::link}, ~{::script})}">
<head>
    <title>個人資料 - 電商系統</title>
    <link rel="stylesheet" href=""> <!-- 額外的CSS -->
</head>
<body>
    <main>
        <div class="row">
            <!-- 左側選單 -->
            <div class="col-md-3 mb-4">
                <div class="card shadow">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0"><i class="bi bi-person-circle"></i> 會員中心</h5>
                    </div>
                    <div class="list-group list-group-flush">
                        <a href="#" class="list-group-item list-group-item-action active">
                            <i class="bi bi-person"></i> 個人資料
                        </a>
                        <a th:href="@{/orders}" class="list-group-item list-group-item-action">
                            <i class="bi bi-receipt"></i> 訂單記錄
                        </a>
                        <a th:href="@{/cart}" class="list-group-item list-group-item-action">
                            <i class="bi bi-cart"></i> 購物車
                        </a>
                        <a href="#" class="list-group-item list-group-item-action" data-bs-toggle="modal" data-bs-target="#changePasswordModal">
                            <i class="bi bi-key"></i> 修改密碼
                        </a>
                    </div>
                </div>
            </div>
            
            <!-- 右側內容 -->
            <div class="col-md-9">
                <div class="card shadow">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0"><i class="bi bi-person"></i> 個人資料</h5>
                    </div>
                    <div class="card-body">
                        <!-- 成功訊息 -->
                        <div id="successMessage" class="alert alert-success d-none" role="alert">
                            <i class="bi bi-check-circle-fill"></i> <span id="successText">個人資料更新成功！</span>
                        </div>
                        
                        <!-- 錯誤訊息 -->
                        <div id="errorMessage" class="alert alert-danger d-none" role="alert">
                            <i class="bi bi-exclamation-triangle-fill"></i> <span id="errorText">更新失敗，請稍後再試。</span>
                        </div>
                        
                        <!-- 個人資料表單 -->
                        <form id="profileForm">
                            <!-- 用戶名 (唯讀) -->
                            <div class="mb-3 row">
                                <label for="username" class="col-sm-3 col-form-label">用戶名</label>
                                <div class="col-sm-9">
                                    <input type="text" class="form-control-plaintext" id="username" readonly>
                                </div>
                            </div>
                            
                            <!-- 電子郵件 -->
                            <div class="mb-3 row">
                                <label for="email" class="col-sm-3 col-form-label">電子郵件 <span class="text-danger">*</span></label>
                                <div class="col-sm-9">
                                    <input type="email" class="form-control" id="email" required>
                                    <div class="form-text">更改電子郵件後，系統將發送驗證郵件到新地址</div>
                                </div>
                            </div>
                            
                            <!-- 暱稱 -->
                            <div class="mb-3 row">
                                <label for="nickname" class="col-sm-3 col-form-label">暱稱</label>
                                <div class="col-sm-9">
                                    <input type="text" class="form-control" id="nickname" maxlength="50">
                                    <div class="form-text">暱稱將顯示在您的個人資料頁面</div>
                                </div>
                            </div>
                            
                            <!-- 星座 -->
                            <div class="mb-3 row">
                                <label for="zodiacSign" class="col-sm-3 col-form-label">星座</label>
                                <div class="col-sm-9">
                                    <select class="form-select" id="zodiacSign">
                                        <option value="">請選擇您的星座（選填）</option>
                                        <option value="水瓶座">水瓶座 (1月20日-2月18日)</option>
                                        <option value="雙魚座">雙魚座 (2月19日-3月20日)</option>
                                        <option value="牡羊座">牡羊座 (3月21日-4月19日)</option>
                                        <option value="金牛座">金牛座 (4月20日-5月20日)</option>
                                        <option value="雙子座">雙子座 (5月21日-6月21日)</option>
                                        <option value="巨蟹座">巨蟹座 (6月22日-7月22日)</option>
                                        <option value="獅子座">獅子座 (7月23日-8月22日)</option>
                                        <option value="處女座">處女座 (8月23日-9月22日)</option>
                                        <option value="天秤座">天秤座 (9月23日-10月23日)</option>
                                        <option value="天蠍座">天蠍座 (10月24日-11月22日)</option>
                                        <option value="射手座">射手座 (11月23日-12月21日)</option>
                                        <option value="摩羯座">摩羯座 (12月22日-1月19日)</option>
                                    </select>
                                </div>
                            </div>
                            
                            <!-- 註冊時間 (唯讀) -->
                            <div class="mb-3 row">
                                <label for="createdAt" class="col-sm-3 col-form-label">註冊時間</label>
                                <div class="col-sm-9">
                                    <input type="text" class="form-control-plaintext" id="createdAt" readonly>
                                </div>
                            </div>
                            
                            <!-- 提交按鈕 -->
                            <div class="mb-3 row">
                                <div class="col-sm-9 offset-sm-3">
                                    <button type="submit" class="btn btn-primary">
                                        <i class="bi bi-save"></i> 保存修改
                                    </button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- 修改密碼模態框 -->
        <div class="modal fade" id="changePasswordModal" tabindex="-1" aria-labelledby="changePasswordModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header bg-primary text-white">
                        <h5 class="modal-title" id="changePasswordModalLabel"><i class="bi bi-key"></i> 修改密碼</h5>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <!-- 密碼修改錯誤訊息 -->
                        <div id="passwordErrorMessage" class="alert alert-danger d-none" role="alert">
                            <i class="bi bi-exclamation-triangle-fill"></i> <span id="passwordErrorText">密碼修改失敗</span>
                        </div>
                        
                        <!-- 密碼修改表單 -->
                        <form id="changePasswordForm">
                            <!-- 當前密碼 -->
                            <div class="mb-3">
                                <label for="currentPassword" class="form-label">當前密碼 <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-key"></i></span>
                                    <input type="password" class="form-control" id="currentPassword" required>
                                    <button class="btn btn-outline-secondary" type="button" id="toggleCurrentPassword">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                </div>
                            </div>
                            
                            <!-- 新密碼 -->
                            <div class="mb-3">
                                <label for="newPassword" class="form-label">新密碼 <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-key-fill"></i></span>
                                    <input type="password" class="form-control" id="newPassword" 
                                           required minlength="8" maxlength="120">
                                    <button class="btn btn-outline-secondary" type="button" id="toggleNewPassword">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                </div>
                                <div class="form-text">密碼應包含大小寫字母、數字和特殊字符，長度至少8個字符</div>
                            </div>
                            
                            <!-- 確認新密碼 -->
                            <div class="mb-3">
                                <label for="confirmNewPassword" class="form-label">確認新密碼 <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-key-fill"></i></span>
                                    <input type="password" class="form-control" id="confirmNewPassword" 
                                           required minlength="8" maxlength="120">
                                    <button class="btn btn-outline-secondary" type="button" id="toggleConfirmNewPassword">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                </div>
                                <div class="form-text">請確保兩次輸入的新密碼一致</div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                        <button type="button" class="btn btn-primary" id="savePasswordButton">
                            <i class="bi bi-save"></i> 保存修改
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // 獲取用戶資料
            function loadUserProfile() {
                // 從localStorage獲取JWT令牌
                const token = localStorage.getItem('token');
                
                if (!token) {
                    // 未登入，重定向到登入頁面
                    window.location.href = '/login?redirect=' + encodeURIComponent(window.location.pathname);
                    return;
                }
                
                // 獲取當前用戶資料
                fetch('/api/users/me', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + token
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('獲取用戶資料失敗');
                    }
                    return response.json();
                })
                .then(data => {
                    // 填充表單
                    document.getElementById('username').value = data.username;
                    document.getElementById('email').value = data.email;
                    document.getElementById('nickname').value = data.nickname || '';
                    document.getElementById('zodiacSign').value = data.zodiacSign || '';
                    
                    // 格式化註冊時間
                    if (data.createdAt) {
                        const createdDate = new Date(data.createdAt);
                        document.getElementById('createdAt').value = createdDate.toLocaleString('zh-TW');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    // 顯示錯誤訊息
                    document.getElementById('errorText').textContent = '獲取用戶資料失敗，請稍後再試。';
                    document.getElementById('errorMessage').classList.remove('d-none');
                });
            }
            
            // 更新用戶資料
            const profileForm = document.getElementById('profileForm');
            const successMessage = document.getElementById('successMessage');
            const errorMessage = document.getElementById('errorMessage');
            
            profileForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                // 從localStorage獲取JWT令牌
                const token = localStorage.getItem('token');
                
                if (!token) {
                    // 未登入，重定向到登入頁面
                    window.location.href = '/login?redirect=' + encodeURIComponent(window.location.pathname);
                    return;
                }
                
                // 獲取表單數據
                const formData = {
                    email: document.getElementById('email').value,
                    nickname: document.getElementById('nickname').value,
                    zodiacSign: document.getElementById('zodiacSign').value
                };
                
                // 發送更新請求
                fetch('/api/users/me', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + token
                    },
                    body: JSON.stringify(formData)
                })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(data => {
                            throw new Error(data.message || '更新用戶資料失敗');
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    // 顯示成功訊息
                    document.getElementById('successText').textContent = '個人資料更新成功！';
                    successMessage.classList.remove('d-none');
                    errorMessage.classList.add('d-none');
                    
                    // 3秒後隱藏成功訊息
                    setTimeout(() => {
                        successMessage.classList.add('d-none');
                    }, 3000);
                })
                .catch(error => {
                    console.error('Error:', error);
                    // 顯示錯誤訊息
                    document.getElementById('errorText').textContent = error.message;
                    errorMessage.classList.remove('d-none');
                    successMessage.classList.add('d-none');
                });
            });
            
            // 密碼可見性切換函數
            function setupPasswordToggle(toggleId, passwordId) {
                const toggleButton = document.getElementById(toggleId);
                const passwordInput = document.getElementById(passwordId);
                
                toggleButton.addEventListener('click', function() {
                    const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                    passwordInput.setAttribute('type', type);
                    
                    // 切換眼睛圖標
                    this.querySelector('i').classList.toggle('bi-eye');
                    this.querySelector('i').classList.toggle('bi-eye-slash');
                });
            }
            
            // 設置密碼可見性切換
            setupPasswordToggle('toggleCurrentPassword', 'currentPassword');
            setupPasswordToggle('toggleNewPassword', 'newPassword');
            setupPasswordToggle('toggleConfirmNewPassword', 'confirmNewPassword');
            
            // 修改密碼
            const savePasswordButton = document.getElementById('savePasswordButton');
            const passwordErrorMessage = document.getElementById('passwordErrorMessage');
            
            savePasswordButton.addEventListener('click', function() {
                // 獲取密碼表單數據
                const currentPassword = document.getElementById('currentPassword').value;
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;
                
                // 驗證新密碼是否一致
                if (newPassword !== confirmNewPassword) {
                    document.getElementById('passwordErrorText').textContent = '兩次輸入的新密碼不一致';
                    passwordErrorMessage.classList.remove('d-none');
                    return;
                }
                
                // 從localStorage獲取JWT令牌
                const token = localStorage.getItem('token');
                
                if (!token) {
                    // 未登入，重定向到登入頁面
                    window.location.href = '/login?redirect=' + encodeURIComponent(window.location.pathname);
                    return;
                }
                
                // 發送修改密碼請求
                fetch('/api/users/change-password', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + token
                    },
                    body: JSON.stringify({
                        currentPassword: currentPassword,
                        newPassword: newPassword
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(data => {
                            throw new Error(data.message || '密碼修改失敗');
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    // 密碼修改成功，關閉模態框並顯示成功訊息
                    const modal = bootstrap.Modal.getInstance(document.getElementById('changePasswordModal'));
                    modal.hide();
                    
                    // 清空密碼表單
                    document.getElementById('currentPassword').value = '';
                    document.getElementById('newPassword').value = '';
                    document.getElementById('confirmNewPassword').value = '';
                    
                    // 顯示成功訊息
                    document.getElementById('successText').textContent = '密碼修改成功！請使用新密碼登入。';
                    successMessage.classList.remove('d-none');
                    errorMessage.classList.add('d-none');
                    
                    // 3秒後隱藏成功訊息
                    setTimeout(() => {
                        successMessage.classList.add('d-none');
                    }, 3000);
                    
                    // 清除令牌，要求用戶重新登入
                    setTimeout(() => {
                        localStorage.removeItem('token');
                        localStorage.removeItem('user');
                        localStorage.removeItem('tokenExpiry');
                        window.location.href = '/login?message=password_changed';
                    }, 3000);
                })
                .catch(error => {
                    console.error('Error:', error);
                    // 顯示錯誤訊息
                    document.getElementById('passwordErrorText').textContent = error.message;
                    passwordErrorMessage.classList.remove('d-none');
                });
            });
            
            // 頁面加載時獲取用戶資料
            loadUserProfile();
        });
    </script>
</body>
</html>

================
File: src/main/resources/templates/register.html
================
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"
      th:replace="~{layout/default :: html(~{::title}, ~{::main}, ~{::link}, ~{::script})}">
<head>
    <title>會員註冊 - 電商系統</title>
    <link rel="stylesheet" href=""> <!-- 額外的CSS -->
</head>
<body>
    <main>
        <div class="row justify-content-center">
            <div class="col-md-8 col-lg-6">
                <div class="card shadow">
                    <div class="card-header bg-primary text-white text-center py-3">
                        <h4 class="mb-0"><i class="bi bi-person-plus"></i> 會員註冊</h4>
                    </div>
                    <div class="card-body p-4">
                        <!-- 註冊表單 -->
                        <form id="registerForm" method="post">
                            <!-- 錯誤訊息 -->
                            <div id="errorMessage" class="alert alert-danger d-none" role="alert">
                                <i class="bi bi-exclamation-triangle-fill"></i> <span id="errorText">註冊失敗，請檢查輸入資料。</span>
                            </div>
                            
                            <!-- 用戶名 -->
                            <div class="mb-3">
                                <label for="username" class="form-label">用戶名 <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-person"></i></span>
                                    <input type="text" class="form-control" id="username" name="username" 
                                           placeholder="請輸入用戶名（3-20個字符）" required
                                           minlength="3" maxlength="20">
                                </div>
                                <div class="form-text">用戶名將用於登入，請使用英文字母、數字和底線</div>
                            </div>
                            
                            <!-- 電子郵件 -->
                            <div class="mb-3">
                                <label for="email" class="form-label">電子郵件 <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-envelope"></i></span>
                                    <input type="email" class="form-control" id="email" name="email" 
                                           placeholder="請輸入有效的電子郵件地址" required>
                                </div>
                                <div class="form-text">我們將發送驗證郵件到此地址</div>
                            </div>
                            
                            <!-- 密碼 -->
                            <div class="mb-3">
                                <label for="password" class="form-label">密碼 <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-key"></i></span>
                                    <input type="password" class="form-control" id="password" name="password" 
                                           placeholder="請輸入密碼（至少8個字符）" required
                                           minlength="8" maxlength="120">
                                    <button class="btn btn-outline-secondary" type="button" id="togglePassword">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                </div>
                                <div class="form-text">密碼應包含大小寫字母、數字和特殊字符</div>
                            </div>
                            
                            <!-- 確認密碼 -->
                            <div class="mb-3">
                                <label for="confirmPassword" class="form-label">確認密碼 <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-key-fill"></i></span>
                                    <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" 
                                           placeholder="請再次輸入密碼" required
                                           minlength="8" maxlength="120">
                                    <button class="btn btn-outline-secondary" type="button" id="toggleConfirmPassword">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                </div>
                                <div class="form-text">請確保兩次輸入的密碼一致</div>
                            </div>
                            
                            <!-- 暱稱 -->
                            <div class="mb-3">
                                <label for="nickname" class="form-label">暱稱</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-person-badge"></i></span>
                                    <input type="text" class="form-control" id="nickname" name="nickname" 
                                           placeholder="請輸入您的暱稱（選填）" maxlength="50">
                                </div>
                                <div class="form-text">暱稱將顯示在您的個人資料頁面</div>
                            </div>
                            
                            <!-- 星座 -->
                            <div class="mb-3">
                                <label for="zodiacSign" class="form-label">星座</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-stars"></i></span>
                                    <select class="form-select" id="zodiacSign" name="zodiacSign">
                                        <option value="" selected>請選擇您的星座（選填）</option>
                                        <option value="水瓶座">水瓶座 (1月20日-2月18日)</option>
                                        <option value="雙魚座">雙魚座 (2月19日-3月20日)</option>
                                        <option value="牡羊座">牡羊座 (3月21日-4月19日)</option>
                                        <option value="金牛座">金牛座 (4月20日-5月20日)</option>
                                        <option value="雙子座">雙子座 (5月21日-6月21日)</option>
                                        <option value="巨蟹座">巨蟹座 (6月22日-7月22日)</option>
                                        <option value="獅子座">獅子座 (7月23日-8月22日)</option>
                                        <option value="處女座">處女座 (8月23日-9月22日)</option>
                                        <option value="天秤座">天秤座 (9月23日-10月23日)</option>
                                        <option value="天蠍座">天蠍座 (10月24日-11月22日)</option>
                                        <option value="射手座">射手座 (11月23日-12月21日)</option>
                                        <option value="摩羯座">摩羯座 (12月22日-1月19日)</option>
                                    </select>
                                </div>
                                <div class="form-text">星座將顯示在您的個人資料頁面</div>
                            </div>
                            
                            <!-- 同意條款 -->
                            <div class="mb-3 form-check">
                                <input type="checkbox" class="form-check-input" id="agreeTerms" name="agreeTerms" required>
                                <label class="form-check-label" for="agreeTerms">
                                    我已閱讀並同意 <a href="#" data-bs-toggle="modal" data-bs-target="#termsModal">服務條款</a> 和 <a href="#" data-bs-toggle="modal" data-bs-target="#privacyModal">隱私政策</a>
                                </label>
                            </div>
                            
                            <!-- 註冊按鈕 -->
                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary">
                                    <i class="bi bi-person-plus"></i> 註冊
                                </button>
                            </div>
                        </form>
                        
                        <!-- 其他選項 -->
                        <div class="mt-3 text-center">
                            <p class="mb-0">
                                已有帳號？ <a th:href="@{/login}" class="text-decoration-none">立即登入</a>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- 服務條款模態框 -->
        <div class="modal fade" id="termsModal" tabindex="-1" aria-labelledby="termsModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-scrollable">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="termsModalLabel">服務條款</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <h6>1. 接受條款</h6>
                        <p>歡迎使用電商系統！通過註冊和使用本網站，您同意遵守以下服務條款。如果您不同意這些條款，請勿使用本網站。</p>
                        
                        <h6>2. 帳號註冊</h6>
                        <p>您必須提供真實、準確、完整的個人資料，並在資料變更時及時更新。您有責任保護您的帳號和密碼安全，並對所有使用您帳號進行的活動負責。</p>
                        
                        <h6>3. 使用規則</h6>
                        <p>您同意不會使用本網站進行任何違法或未經授權的活動，包括但不限於：發布侵犯他人知識產權的內容、發布虛假或誤導性信息、干擾網站正常運行等。</p>
                        
                        <h6>4. 商品和交易</h6>
                        <p>本網站上的商品信息僅供參考，實際商品以收到的實物為準。我們保留隨時調整價格、暫停或終止銷售任何商品的權利。</p>
                        
                        <h6>5. 責任限制</h6>
                        <p>在法律允許的最大範圍內，本網站對於任何直接、間接、附帶、特殊、懲罰性或後果性損害不承擔責任。</p>
                        
                        <h6>6. 修改條款</h6>
                        <p>我們保留隨時修改這些條款的權利。修改後的條款將在本網站上發布，並自發布之日起生效。繼續使用本網站將視為您接受修改後的條款。</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-bs-dismiss="modal">我已閱讀並同意</button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- 隱私政策模態框 -->
        <div class="modal fade" id="privacyModal" tabindex="-1" aria-labelledby="privacyModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-scrollable">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="privacyModalLabel">隱私政策</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <h6>1. 收集的信息</h6>
                        <p>我們收集的個人信息包括但不限於：姓名、電子郵件地址、聯繫方式、配送地址、支付信息等。我們也會自動收集使用數據，如IP地址、瀏覽器類型、訪問時間等。</p>
                        
                        <h6>2. 信息使用</h6>
                        <p>我們使用收集的信息來：處理訂單、提供客戶服務、改進網站、發送營銷信息（如果您同意）、防止欺詐等。</p>
                        
                        <h6>3. 信息共享</h6>
                        <p>我們不會出售或出租您的個人信息給第三方。我們可能與服務提供商（如支付處理商、配送公司）共享必要的信息以完成交易。</p>
                        
                        <h6>4. 數據安全</h6>
                        <p>我們採取合理的安全措施來保護您的個人信息，防止未經授權的訪問、使用或披露。</p>
                        
                        <h6>5. Cookie使用</h6>
                        <p>我們使用Cookie和類似技術來改善用戶體驗、分析網站使用情況和個性化內容。您可以通過瀏覽器設置控制Cookie。</p>
                        
                        <h6>6. 您的權利</h6>
                        <p>您有權訪問、更正、刪除您的個人信息，以及限制或反對我們處理您的數據。請通過聯繫方式與我們聯繫以行使這些權利。</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-bs-dismiss="modal">我已閱讀並同意</button>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // 切換密碼可見性
            const togglePassword = document.getElementById('togglePassword');
            const password = document.getElementById('password');
            
            togglePassword.addEventListener('click', function() {
                const type = password.getAttribute('type') === 'password' ? 'text' : 'password';
                password.setAttribute('type', type);
                
                // 切換眼睛圖標
                this.querySelector('i').classList.toggle('bi-eye');
                this.querySelector('i').classList.toggle('bi-eye-slash');
            });
            
            // 切換確認密碼可見性
            const toggleConfirmPassword = document.getElementById('toggleConfirmPassword');
            const confirmPassword = document.getElementById('confirmPassword');
            
            toggleConfirmPassword.addEventListener('click', function() {
                const type = confirmPassword.getAttribute('type') === 'password' ? 'text' : 'password';
                confirmPassword.setAttribute('type', type);
                
                // 切換眼睛圖標
                this.querySelector('i').classList.toggle('bi-eye');
                this.querySelector('i').classList.toggle('bi-eye-slash');
            });
            
            // 表單提交前的處理
            const registerForm = document.getElementById('registerForm');
            const errorMessage = document.getElementById('errorMessage');
            const errorText = document.getElementById('errorText');
            
            registerForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                // 檢查密碼是否一致
                if (password.value !== confirmPassword.value) {
                    errorText.textContent = '兩次輸入的密碼不一致，請重新輸入。';
                    errorMessage.classList.remove('d-none');
                    return;
                }
                
                // 獲取表單數據
                const formData = {
                    username: document.getElementById('username').value,
                    email: document.getElementById('email').value,
                    password: document.getElementById('password').value,
                    nickname: document.getElementById('nickname').value,
                    zodiacSign: document.getElementById('zodiacSign').value,
                    roles: ["user"] // 默認為普通用戶角色
                };
                
                // 發送註冊請求
                fetch('/api/auth/signup', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(data => {
                            throw new Error(data.message || '註冊失敗，請稍後再試。');
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    // 註冊成功，顯示成功訊息並重定向到登入頁面
                    alert('註冊成功！請登入您的帳號。');
                    window.location.href = '/login';
                })
                .catch(error => {
                    console.error('Error:', error);
                    // 顯示錯誤訊息
                    errorText.textContent = error.message;
                    errorMessage.classList.remove('d-none');
                });
            });
        });
    </script>
</body>
</html>

================
File: src/main/resources/templates/user-profile.html
================
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"
      th:replace="~{layout/default :: html(~{::title}, ~{::main}, ~{::link}, ~{::script})}">
<head>
    <title>會員資料 - 電商系統</title>
    <link rel="stylesheet" href=""> <!-- 額外的CSS -->
</head>
<body>
    <main>
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card shadow">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0"><i class="bi bi-person"></i> 會員資料</h5>
                    </div>
                    <div class="card-body">
                        <!-- 錯誤訊息 -->
                        <div id="errorMessage" class="alert alert-danger d-none" role="alert">
                            <i class="bi bi-exclamation-triangle-fill"></i> <span id="errorText">獲取會員資料失敗</span>
                        </div>
                        
                        <!-- 會員資料 -->
                        <div class="row mb-4">
                            <div class="col-md-3 text-center">
                                <div class="avatar-container mb-3">
                                    <i class="bi bi-person-circle" style="font-size: 6rem;"></i>
                                </div>
                            </div>
                            <div class="col-md-9">
                                <h4 id="username" class="mb-3">用戶名</h4>
                                <p><strong>暱稱：</strong> <span id="nickname">-</span></p>
                                <p><strong>星座：</strong> <span id="zodiacSign">-</span></p>
                                <p><strong>註冊時間：</strong> <span id="createdAt">-</span></p>
                            </div>
                        </div>
                        
                        <!-- 會員發布的評論 -->
                        <div class="row">
                            <div class="col-12">
                                <h5 class="border-bottom pb-2 mb-3">最近評論</h5>
                                <div id="reviewsContainer">
                                    <!-- 評論將動態加載 -->
                                    <p class="text-muted text-center" id="noReviewsMessage">該會員尚未發布任何評論</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // 從URL獲取用戶ID
            const pathParts = window.location.pathname.split('/');
            const userId = pathParts[pathParts.length - 1];
            
            // 獲取會員公開資料
            function loadUserPublicProfile(userId) {
                fetch(`/api/users/${userId}/public`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('獲取會員資料失敗');
                    }
                    return response.json();
                })
                .then(data => {
                    // 填充會員資料
                    document.getElementById('username').textContent = data.username;
                    document.getElementById('nickname').textContent = data.nickname || '-';
                    document.getElementById('zodiacSign').textContent = data.zodiacSign || '-';
                    
                    // 格式化註冊時間
                    if (data.createdAt) {
                        const createdDate = new Date(data.createdAt);
                        document.getElementById('createdAt').textContent = createdDate.toLocaleString('zh-TW');
                    }
                    
                    // 加載會員評論
                    loadUserReviews(userId);
                })
                .catch(error => {
                    console.error('Error:', error);
                    // 顯示錯誤訊息
                    document.getElementById('errorText').textContent = '獲取會員資料失敗，請稍後再試。';
                    document.getElementById('errorMessage').classList.remove('d-none');
                });
            }
            
            // 獲取會員評論
            function loadUserReviews(userId) {
                fetch(`/api/users/${userId}/reviews`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('獲取會員評論失敗');
                    }
                    return response.json();
                })
                .then(data => {
                    const reviewsContainer = document.getElementById('reviewsContainer');
                    const noReviewsMessage = document.getElementById('noReviewsMessage');
                    
                    if (data.length > 0) {
                        // 隱藏無評論訊息
                        noReviewsMessage.style.display = 'none';
                        
                        // 清空容器
                        reviewsContainer.innerHTML = '';
                        
                        // 添加評論
                        data.forEach(review => {
                            const reviewElement = document.createElement('div');
                            reviewElement.className = 'card mb-3';
                            
                            const reviewDate = new Date(review.createdAt).toLocaleString('zh-TW');
                            
                            reviewElement.innerHTML = `
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <h6 class="card-title mb-0">
                                            <a href="/products/${review.productId}">${review.productName}</a>
                                        </h6>
                                        <div class="text-warning">
                                            ${generateStarRating(review.rating)}
                                        </div>
                                    </div>
                                    <p class="card-text">${review.content}</p>
                                    <p class="card-text"><small class="text-muted">${reviewDate}</small></p>
                                </div>
                            `;
                            
                            reviewsContainer.appendChild(reviewElement);
                        });
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    // 簡單顯示無評論訊息
                    document.getElementById('noReviewsMessage').textContent = '無法加載評論';
                });
            }
            
            // 生成星級評分HTML
            function generateStarRating(rating) {
                let stars = '';
                for (let i = 1; i <= 5; i++) {
                    if (i <= rating) {
                        stars += '<i class="bi bi-star-fill"></i>';
                    } else if (i - 0.5 <= rating) {
                        stars += '<i class="bi bi-star-half"></i>';
                    } else {
                        stars += '<i class="bi bi-star"></i>';
                    }
                }
                return stars;
            }
            
            // 頁面加載時獲取會員資料
            loadUserPublicProfile(userId);
        });
    </script>
</body>
</html>
